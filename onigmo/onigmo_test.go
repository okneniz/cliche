package onigmo_test

import (
	"strings"
	"testing"

	"github.com/okneniz/cliche"
	"github.com/okneniz/cliche/onigmo"
)

func TestOnigmo(t *testing.T) {
	t.Parallel()

	// x(t, ``, "", 0, 0)
	x(t, `^`, "", 0, 0)
	x(t, `$`, "", 0, 0)
	x(t, `\A`, "", 0, 0)
	x(t, `\z`, "", 0, 0)
	x(t, `^$`, "", 0, 0)
	// x(/\ca/, "\001", 0, 1)
	// x(/\C-b/, "\002", 0, 1)
	// x(/\c\\/, "\034", 0, 1)
	// x(/q[\c\\]/, "q\034", 0, 2)

	// x(t, ``, "a", 0, 0)
	x(t, `a`, "a", 0, 1)
	x(t, `\x61`, "a", 0, 1)
	x(t, `aa`, "aa", 0, 2)
	x(t, `aaa`, "aaa", 0, 3)
	x(t, `aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 0, 35)
	x(t, "ab", "ab", 0, 2)
	x(t, "b", "ab", 1, 1)
	x(t, "bc", "abc", 1, 2)
	// x(t, "(?i:#RET#)", "#INS##RET#", 5, 10)
	// x(t, "\17", "\017", 0, 1)

	x(t, "\x1f", "\x1f", 0, 1)
	x(t, "a(?#....\\JJJJ)b", "ab", 0, 2)
	// x(t, "(?x)\ta .\n+b", "0a123b4", 1, 6, 0)

	// x(t, `(?x)  G (o O(?-x)oO) g L`, `GoOoogLe`, 0, 7)
	x(t, `.`, "a", 0, 1)
	n(t, `.`, "")
	x(t, `..`, "ab", 0, 2)
	x(t, `\w`, "e", 0, 1)
	n(t, `\W`, "e")
	x(t, `\s`, " ", 0, 1)
	x(t, `\S`, "b", 0, 1)
	x(t, `\d`, "4", 0, 1)
	n(t, `\D`, "4")
	x(t, `\b`, "z ", 0, 0)
	x(t, `\b`, " z", 1, 0)
	x(t, `\B`, "zz ", 1, 0)
	x(t, `\B`, "z ", 2, 0)
	x(t, `\B`, " z", 0, 0)
	x(t, `[ab]`, "b", 0, 1)
	n(t, `[ab]`, "c")
	x(t, `[a-z]`, "t", 0, 1)
	n(t, `[^a]`, "a")
	x(t, `[^a]`, "\n", 0, 1)
	// x(t, `[]]`, "]", 0, 1) // TODO : warning: character class has ']' without escape: /[]]/
	// n(t, `[^]]`, "]") // TODO: character class has ']' without escape: /[^]]/
	x(t, `[\^]+`, "0^^1", 1, 2)
	x(t, `[b-]`, "b", 0, 1)
	x(t, `[b-]`, "-", 0, 1)
	x(t, `[\w]`, "z", 0, 1)
	n(t, `[\w]`, " ")
	x(t, `[\W]`, "b$", 1, 1)
	x(t, `[\d]`, "5", 0, 1)
	n(t, `[\d]`, "e")
	x(t, `[\D]`, "t", 0, 1)
	n(t, `[\D]`, "3")
	x(t, `[\s]`, " ", 0, 1)
	n(t, `[\s]`, "a")
	x(t, `[\S]`, "b", 0, 1)
	n(t, `[\S]`, " ")
	x(t, `[\w\d]`, "2", 0, 1)
	n(t, `[\w\d]`, " ")
	x(t, `[[:upper:]]`, "B", 0, 1)
	x(t, `[*[:xdigit:]+]`, `+`, 0, 1)
	x(t, `[*[:xdigit:]+]`, `GHIKK-9+*`, 6, 1)
	x(t, `[*[:xdigit:]+]`, `-@^+`, 3, 1)
	n(t, `[[:upper]]`, "A")
	x(t, `[[:upper]]`, ":", 0, 1)

	// TODO : conflict no in a class
	// octal parsing not implemented (conflict with backreferences)
	// x(t, `[\044-\047]`, "\046", 0, 1)
	x(t, `[\x5a-\x5c]`, "[", 0, 1)
	x(t, `[\x6A-\x6D]`, "l", 0, 1)
	n(t, `[\x6A-\x6D]`, "n")

	n(t, `^[0-9A-F]+ 0+ UNDEF `, "75F 00000000 SECT14A notype ()    External    | _rb_apply")
	x(t, `[\[]`, "[", 0, 1)
	x(t, `[\]]`, "]", 0, 1)
	x(t, `[&]`, "&", 0, 1)
	x(t, `[[ab]]`, `b`, 0, 1)
	x(t, `[[ab]c]`, `c`, 0, 1)
	n(t, `[[^a]]`, `a`)
	n(t, `[^[a]]`, `a`)

	// not implemented yet
	// x(t, `[[ab]&&bc]`, 'b', 0, 1)
	// n(t, `[[ab]&&bc]`, 'a')
	// n(t, `[[ab]&&bc]`, 'c')
	// x(t, `[a-z&&b-y&&c-x]`, 'w', 0, 1)
	// n(t, `[^a-z&&b-y&&c-x]`, 'w')
	// x(t, `[[^a&&a]&&a-z]`, 'b', 0, 1)
	// n(t, `[[^a&&a]&&a-z]`, 'a')
	// x(t, `[[^a-z&&bcdef]&&[^c-g]]`, 'h', 0, 1)
	// n(t, `[[^a-z&&bcdef]&&[^c-g]]`, 'c')
	// x(t, `[^[^abc]&&[^cde]]`, 'c', 0, 1)
	// x(t, `[^[^abc]&&[^cde]]`, 'e', 0, 1)
	// n(t, `[^[^abc]&&[^cde]]`, 'f')
	// x(t, `[a-&&-a]`, '-', 0, 1)
	// n(t, `[a\-&&\-a]`, '&')

	n(t, `\wabc`, " abc")
	x(t, `a\Wbc`, "a bc", 0, 4)
	x(t, `a.b.c`, "aabbc", 0, 5)
	x(t, `.\wb\W..c`, "abb bcc", 0, 7)
	x(t, `\s\wzzz`, " zzzz", 0, 5)
	x(t, `aa.b`, "aabb", 0, 4)
	n(t, `.a`, "ab")
	x(t, `.a`, "aa", 0, 2)
	x(t, `^a`, "a", 0, 1)
	x(t, `^a$`, "a", 0, 1)
	x(t, `^\w$`, "a", 0, 1)
	n(t, `^\w$`, " ")
	x(t, `^\wab$`, "zab", 0, 3)
	x(t, `^\wabcdef$`, "zabcdef", 0, 7)
	x(t, `^\w...def$`, "zabcdef", 0, 7)
	x(t, `\w\w\s\Waaa\d`, "aa  aaa4", 0, 8)
	x(t, `\A\Z`, "", 0, 0)
	x(t, `\Axyz`, "xyz", 0, 3)
	x(t, `xyz\Z`, "xyz", 0, 3)
	x(t, `xyz\z`, "xyz", 0, 3)
	x(t, `a\Z`, "a", 0, 1)
	// x(t, /\Gaz/, 'az', 0, 2)
	// n(t, /\Gz/, 'bza')
	// n(t, /az\G/, 'az')
	n(t, `az\A`, `az`)
	n(t, `a\Az`, `az`)
	x(t, `\^\$`, "^$", 0, 2)
	x(t, `^x?y`, "xy", 0, 2)
	x(t, `^(x?y)`, "xy", 0, 2)
	x(t, `\w`, "_", 0, 1)
	n(t, `\W`, "_")
	x(t, `(?=z)z`, "z", 0, 1)
	n(t, `(?=z).`, "a")
	x(t, `(?!z)a`, "a", 0, 1)
	n(t, `(?!z)a`, "z")

	x(t, `(?i:a)`, "a", 0, 1)
	x(t, `(?i:a)`, "A", 0, 1)
	x(t, `(?i:A)`, "a", 0, 1)
	n(t, `(?i:A)`, "b")
	x(t, `(?i:[A-Z])`, "a", 0, 1)
	x(t, `(?i:[f-m])`, "H", 0, 1)
	x(t, `(?i:[f-m])`, "h", 0, 1)
	n(t, `(?i:[f-m])`, "e")
	x(t, `(?i:[A-c])`, "D", 0, 1)

	// #n(/(?i:[a-C])/, 'D')   # changed spec.(error) 2003/09/17
	// n(t, `(?i:[b-C])`, `A`) // TODO : empty range in char
	// x(t, `(?i:[a-C])`, `B`, 0, 1) // TODO : empty range in char class
	// n(t, `(?i:[c-X])`, `[`) # TODO : empty range ...

	n(t, `(?i:[^a-z])`, "A")
	n(t, `(?i:[^a-z])`, "a")
	x(t, `(?i:[!-k])`, "Z", 0, 1)
	x(t, `(?i:[!-k])`, "7", 0, 1)
	x(t, `(?i:[T-}])`, "b", 0, 1)
	x(t, `(?i:[T-}])`, "{", 0, 1)
	x(t, `(?i:\?a)`, "?A", 0, 2)
	x(t, `(?i:\*A)`, "*a", 0, 2)

	n(t, `.`, "\n")
	x(t, `(?m:.)`, "\n", 0, 1)
	x(t, `(?m:a.)`, "a\n", 0, 2)
	x(t, `(?m:.b)`, "a\nb", 1, 2)

	x(t, `.*abc`, "dddabdd\nddabc", 8, 5)
	x(t, `(?m:.*abc)`, "dddabddabc", 0, 10)
	n(t, `(?i)(?-i)a`, "A")
	n(t, `(?i)(?-i:a)`, "A")

	x(t, `a?`, "", 0, 0)
	x(t, `a?`, "b", 0, 0)
	x(t, `a?`, "a", 0, 1)
	x(t, `a*`, "", 0, 0)
	x(t, `a*`, "a", 0, 1)
	x(t, `a*`, "aaa", 0, 3)
	x(t, `a*`, "baaaa", 0, 0)

	n(t, `a+`, "")
	x(t, `a+`, "a", 0, 1)
	x(t, `a+`, "aaaa", 0, 4)
	x(t, `a+`, "aabbb", 0, 2)
	x(t, `a+`, "baaaa", 1, 4)

	x(t, `.?`, ``, 0, 0)
	x(t, `.?`, "f", 0, 1)
	x(t, `.?`, "\n", 0, 0)
	x(t, `.*`, "", 0, 0)
	x(t, `.*`, "abcde", 0, 5)
	x(t, `.+`, "z", 0, 1)
	x(t, `.+`, "zdswer\n", 0, 6)
	x(t, `(.*)a\1f`, "babfbac", 0, 4)
	x(t, `(.*)a\1f`, "bacbabf", 3, 4)
	// x(t, `((.*)a\2f)`, "bacbabf", 3, 4) // TODO : important
	x(t, `(.*)a\1f`, "baczzzzzz\nbazz\nzzzzbabf", 19, 4)
	x(t, `a|b`, "a", 0, 1)
	x(t, `a|b`, "b", 0, 1)

	// x(t, `|a`, "a", 0, 0) // wtf (check bnf / ebnf)
	// x(t `(|a)`, 'a', 0, 0)

	x(t, `ab|bc`, "ab", 0, 2)
	x(t, `ab|bc`, "bc", 0, 2)

	x(t, `z(?:ab|bc)`, "zbc", 0, 3)
	x(t, `a(?:ab|bc)c`, "aabc", 0, 4)
	x(t, `ab|(?:ac|az)`, "az", 0, 2)
	x(t, `a|b|c`, "dc", 1, 1)
	x(t, `a|b|cd|efg|h|ijk|lmn|o|pq|rstuvwx|yz`, "pqr", 0, 2)
	n(t, `a|b|cd|efg|h|ijk|lmn|o|pq|rstuvwx|yz`, "mn")

	x(t, `a|^z`, "ba", 1, 1)
	x(t, `a|^z`, "za", 0, 1)

	// x(/a|\Gz/, 'bza', 2, 3)
	// x(/a|\Gz/, 'za', 0, 1)
	// x(/a|\Az/, 'bza', 2, 3)
	x(t, `a|\Az`, `za`, 0, 1)
	x(t, `a|b\Z`, "ba", 1, 1)
	x(t, `a|b\Z`, `b`, 0, 1)

	x(t, `a|b\z`, `ba`, 1, 1)
	x(t, `a|b\z`, `b`, 0, 1)

	x(t, `\w|\s`, " ", 0, 1)
	n(t, `\w|\w`, " ")
	x(t, `\w|%`, "%", 0, 1)
	x(t, `\w|[&$]`, "&", 0, 1)
	x(t, `[b-d]|[^e-z]`, "a", 0, 1)
	x(t, `(?:a|[c-f])|bz`, "dz", 0, 1)
	x(t, `(?:a|[c-f])|bz`, "bz", 0, 2)

	// x(t, `abc|(?=zz)..f`, "zzf", 0, 3) // TODO : panic
	x(t, `abc|(?!zz)..f`, "abf", 0, 3)

	// x(t, `(?=za)..a|(?=zz)..a`, "zza", 0, 3) // TODO : panic

	n(t, `(?>a|abd)c`, "abdc")
	x(t, `(?>abd|a)c`, "abdc", 0, 4) // pass, but why? (bound)

	x(t, `a?|b`, `a`, 0, 1)
	x(t, `a?|b`, `b`, 0, 0)
	x(t, `a?|b`, ``, 0, 0)
	x(t, `a*|b`, `aa`, 0, 2)
	x(t, `a*|b*`, `ba`, 0, 0) // FAILD but why
	x(t, `a*|b*`, `ab`, 0, 1)
	x(t, `a+|b*`, "", 0, 0)
	x(t, `a+|b*`, `bbb`, 0, 3)
	x(t, `a+|b*`, `abbb`, 0, 1)
	n(t, `a+|b+`, "")
	x(t, `(a|b)?`, `b`, 0, 1)
	x(t, `(a|b)*`, `ba`, 0, 2)
	x(t, `(a|b)+`, `bab`, 0, 3)
	x(t, `(ab|ca)+`, "caabbc", 0, 4)
	x(t, `(ab|ca)+`, `aabca`, 1, 4)
	x(t, `(ab|ca)+`, `abzca`, 0, 2)
	x(t, `(a|bab)+`, `ababa`, 0, 5)
	x(t, `(a|bab)+`, `ba`, 1, 1)
	x(t, `(a|bab)+`, `baaaba`, 1, 3)
	x(t, `(?:a|b)(?:a|b)`, `ab`, 0, 2)
	// x(t, `(?:a*|b*)(?:a*|b*)`, `aaabbb`, 0, 3) // TODO : debug alternation
	x(t, `(?:a*|b*)(?:a+|b+)`, `aaabbb`, 0, 6)
	x(t, `(?:a+|b+){2}`, `aaabbb`, 0, 6)
	x(t, `h{0,}`, `hhhh`, 0, 4)
	x(t, `(?:a+|b+){1,2}`, `aaabbb`, 0, 6)
	n(t, `ax{2}*a`, `0axxxa1`)
	n(t, `a.{0,2}a`, "0aXXXa0")
	n(t, `a.{0,2}?a`, "0aXXXa0")
	n(t, `a.{0,2}?a`, "0aXXXXa0")
	// x(/^a{2,}?a$/, "aaa", 0, 3)
	// x(/^[a-z]{2,}?$/, "aaa", 0, 3)
	// x(t, `(?:a+|\Ab*)cc`, `cc`, 0, 2) // TODO : debug alternation
	n(t, `(?:a+|\Ab*)cc`, "abcc")
	x(t, `(?:^a+|b+)*c`, `aabbbabc`, 6, 2)
	x(t, `(?:^a+|b+)*c`, `aabbbbc`, 0, 7)

	x(t, `a|(?i)c`, "C", 0, 1)
	x(t, `(?i)c|a`, "C", 0, 1)
	// i(/(?i)c|a/, 'A', 0, 1)  # different spec.
	x(t, `(?i:c)|a`, "C", 0, 1)
	n(t, `(?i:c)|a`, "A")

	x(t, `[abc]?`, `abc`, 0, 1)
	x(t, `[abc]*`, `abc`, 0, 3)
	x(t, `[^abc]*`, `abc`, 0, 0)
	n(t, `[^abc]+`, `abc`)

	// advanced quantifiers not implemented yet
	// x(/a??/, 'aaa', 0, 0)
	// x(/ba??b/, 'bab', 0, 3)
	// x(/a*?/, 'aaa', 0, 0)
	// x(/ba*?/, 'baa', 0, 1)
	// x(/ba*?b/, 'baab', 0, 4)
	// x(/a+?/, 'aaa', 0, 1)
	// x(/ba+?/, 'baa', 0, 2)
	// x(/ba+?b/, 'baab', 0, 4)
	// x(/(?:a?)??/, 'a', 0, 0)
	// x(/(?:a??)?/, 'a', 0, 0)
	// x(/(?:a?)+?/, 'aaa', 0, 1)
	// x(/(?:a+)??/, 'aaa', 0, 0)
	// x(/(?:a+)??b/, 'aaab', 0, 4)
	// i(/(?:ab)?{2}/, '', 0, 0)   # GNU regex bug
	// x(/(?:ab)?{2}/, 'ababa', 0, 4)
	// x(/(?:ab)*{0}/, 'ababa', 0, 0)
	x(t, `(?:ab){3,}`, `abababab`, 0, 8)
	n(t, `(?:ab){3,}`, "abab")
	x(t, `(?:ab){2,4}`, `ababab`, 0, 6)
	x(t, `(?:ab){2,4}`, `ababababab`, 0, 8)
	// x(/(?:ab){2,4}?/, 'ababababab', 0, 4)
	x(t, `(?:ab){,}`, `ab{,}`, 0, 5)
	// x(/(?:abc)+?{2}/, 'abcabcabc', 0, 6)
	x(t, `(?:X*)(?i:xa)`, `XXXa`, 0, 4)
	x(t, `(d+)([^abc]z)`, `dddz`, 0, 4)
	x(t, `([^abc]*)([^abc]z)`, `dddz`, 0, 4)
	x(t, `(\w+)(\wz)`, `dddz`, 0, 4)
	x(t, `(a)`, `a`, 0, 1)
	x(t, `(ab)`, `ab`, 0, 2)
	x(t, `((ab))`, `ab`, 0, 2)
	// x(/((ab))/, 'ab', 0, 2, 1)
	// x(/((ab))/, 'ab', 0, 2, 2)
	x(t, `((((((((((((((((((((ab))))))))))))))))))))`, `ab`, 0, 2)
	x(t, `(ab)(cd)`, `abcd`, 0, 4)
	// x(/(ab)(cd)/, 'abcd', 2, 4, 2)
	// x(/()(a)bc(def)ghijk/, 'abcdefghijk', 3, 6, 3)
	// x(/(()(a)bc(def)ghijk)/, 'abcdefghijk', 3, 6, 4)
	x(t, `(^a)`, `a`, 0, 1)
	x(t, `(a)|(a)`, `ba`, 1, 1)
	x(t, `(^a)|(a)`, `ba`, 1, 1)
	x(t, `(a?)`, `aaa`, 0, 1)
	x(t, `(a*)`, `aaa`, 0, 3)
	// x(t, `(a*)`, ``, 0, 0) // TODO
	x(t, `(a+)`, `aaaaaaa`, 0, 7)
	x(t, `(a+|b*)`, `bbbaa`, 0, 3)
	x(t, `(a+|b?)`, `bbbaa`, 0, 1)
	x(t, `(abc)?`, `abc`, 0, 3)
	x(t, `(abc)*`, `abc`, 0, 3)
	x(t, `(abc)+`, `abc`, 0, 3)
	x(t, `(xyz|abc)+`, `abc`, 0, 3)
	x(t, `([xyz][abc]|abc)+`, `abc`, 0, 3)
	// x(/((?i:abc))/, 'AbC', 0, 3, 1)
	x(t, `(abc)(?i:\1)`, `abcABC`, 0, 6)
	// x(/((?m:a.c))/, "a\nc", 0, 3, 1)
	// x(t, `((?=az)a)`, `azb`, 0, 1) // panic
	x(t, `abc|(.abd)`, `zabd`, 0, 4)
	x(t, `(?:abc)|(ABC)`, `abc`, 0, 3)
	// x(/(?i:(abc))|(zzz)/, 'ABC', 0, 3, 1)
	x(t, `a*(.)`, `aaaaz`, 0, 5)
	// x(/a*?(.)/, 'aaaaz', 0, 1, 1)
	// x(/a*?(c)/, 'aaaac', 4, 5, 1)
	x(t, `[bcd]a*(.)`, `caaaaz`, 0, 6)
	x(t, `(\Abb)cc`, `bbcc`, 0, 4)
	n(t, `(\Abb)cc`, "zbbcc")
	x(t, `(^bb)cc`, `bbcc`, 0, 4)
	n(t, `(^bb)cc`, "zbbcc")
	x(t, `cc(bb$)`, `ccbb`, 0, 4)
	n(t, `cc(bb$)`, "ccbbb")
	// #n(/\1/, 'a')     # compile error on Oniguruma
	n(t, `(\1)`, "")
	// n(t, `\1(a)`, "aa") // TODO
	n(t, `(a(b)\1)\2+`, "ababb")
	// n(t, `(?:(?:\1|z)(a))+$`, "zaa")
	// x(/(?:(?:\1|z)(a))+$/, 'zaaa', 0, 4)
	x(t, `(a)(?=\1)`, "aa", 0, 1)
	// n(t, `(a)$|\1`, "az")
	x(t, `(a)\1`, `aa`, 0, 2)
	n(t, `(a)\1`, "ab")
	x(t, `(a?)\1`, `aa`, 0, 2)
	// x(/(a??)\1/, 'aa', 0, 0)
	x(t, `(a*)\1`, `aaaaa`, 0, 4)
	// x(/(a*)\1/, 'aaaaa', 0, 2, 1)
	x(t, `a(b*)\1`, `abbbb`, 0, 5)
	// x(t, `a(b*)\1`, `ab`, 0, 2) // TODO : important
	x(t, `(a*)(b*)\1\2`, `aaabbaaabb`, 0, 10)
	x(t, `(a*)(b*)\2`, `aaabbbb`, 0, 7)
	// x(/(((((((a*)b))))))c\7/, 'aaabcaaa', 0, 8)
	// x(/(((((((a*)b))))))c\7/, 'aaabcaaa', 0, 3, 7)
	x(t, `(a)(b)(c)\2\1\3`, `abcbac`, 0, 6)
	x(t, `([a-d])\1`, `cc`, 0, 2)
	x(t, `(\w\d\s)\1`, `f5 f5 `, 0, 6)
	n(t, `(\w\d\s)\1`, "f5 f5")
	x(t, `(who|[a-c]{3})\1`, `whowho`, 0, 6)
	x(t, `...(who|[a-c]{3})\1`, `abcwhowho`, 0, 9)
	x(t, `(who|[a-c]{3})\1`, `cbccbc`, 0, 6)
	x(t, `(^a)\1`, `aa`, 0, 2)
	n(t, `(^a)\1`, "baa")
	n(t, `(a$)\1`, "aa")
	n(t, `(ab\Z)\1`, "ab")
	// x(t, `(a*\Z)\1`, `a`, 1, 0) // TODO
	// x(/.(a*\Z)\1/, 'ba', 1, 2) // TODO : important
	// x(t, `(.(abc)\2)`, `zabcabc`, 0, 7) // TODO
	// x(/(.(..\d.)\2)/, 'z12341234', 0, 9, 1)
	x(t, `((?i:az))\1`, `AzAz`, 0, 4)
	// n(/((?i:az))\1/, 'Azaz')
	x(t, `(?<=a)b`, `ab`, 1, 1)
	n(t, `(?<=a)b`, `bb`)

	// TODO : должны быть фиксированного размера
	// x(t, `(?<=a|b)b`, `bb`, 1, 1)
	// x(t, `(?<=a|bc)b`, `bcb`, 2, 1)
	// x(t, `(?<=a|bc)b`, `ab`, 1, 1)
	// x(/(?<=a|bc||defghij|klmnopq|r)z/, 'rz', 1, 2)

	// x(/(a)\g<1>/, 'aa', 0, 2)
	x(t, `(?<!a)b`, `cb`, 1, 1)
	n(t, `(?<!a)b`, `ab`)

	// TODO : должны быть фиксированного размера
	// x(t, `(?<!a|bc)b`, `bbb`, 0, 1)
	// n(t, `(?<!a|bc)z`, "bcz") // TODO : panic

	x(t, `(?<name1>a)`, `a`, 0, 1)

	// x(t, `(?<name_2>ab)\g<name_2>`, `abab`, 0, 4)
	x(t, `(?<name_3>.zv.)\k<name_3>`, `azvbazvb`, 0, 8)

	// x(/(?<=\g<ab>)|-\zEND (?<ab>XyZ)/, 'XyZ', 3, 3)
	// x(/(?<n>|a\g<n>)+/, '', 0, 0)
	// x(/(?<n>|\(\g<n>\))+$/, '()(())', 0, 6)
	// x(/\g<n>(?<n>.){0}/, 'X', 0, 1, 1)
	// x(/\g<n>(abc|df(?<n>.YZ){2,8}){0}/, 'XYZ', 0, 3)
	// x(/\A(?<n>(a\g<n>)|)\z/, 'aaaa', 0, 4)
	// x(/(?<n>|\g<m>\g<n>)\z|\zEND (?<m>a|(b)\g<m>)/, 'bbbbabba', 0, 8)
	// x(/(?<name1240>\w+\sx)a+\k<name1240>/, '  fg xaaaaaaaafg x', 2, 18)
	// x(/(z)()()(?<_9>a)\g<_9>/, 'zaa', 2, 3, 1)

	x(t, `(.)(((?<_>a)))\k<_>`, `zaa`, 0, 3)
	x(t, `((?<name1>\d)|(?<name2>\w))(\k<name1>|\k<name2>)`, `ff`, 0, 2)
	// x(/(?:(?<x>)|(?<x>efg))\k<x>/, '', 0, 0)
	x(t, `(?:(?<x>abc)|(?<x>efg))\k<x>`, `abcefgefg`, 3, 6)
	n(t, `(?:(?<x>abc)|(?<x>efg))\k<x>`, "abcefg")
	x(t, `(?:(?<n1>.)|(?<n1>..)|(?<n1>...)|(?<n1>....)|(?<n1>.....)|(?<n1>......)|(?<n1>.......)|(?<n1>........)|(?<n1>.........)|(?<n1>..........)|(?<n1>...........)|(?<n1>............)|(?<n1>.............)|(?<n1>..............))\k<n1>$`, `a-pyumpyum`, 2, 8)
	x(t, `(?:(?<n1>.)|(?<n1>..)|(?<n1>...)|(?<n1>....)|(?<n1>.....)|(?<n1>......)|(?<n1>.......)|(?<n1>........)|(?<n1>.........)|(?<n1>..........)|(?<n1>...........)|(?<n1>............)|(?<n1>.............)|(?<n1>..............))\k<n1>$`, `xxxxabcdefghijklmnabcdefghijklmn`, 4, 28)
	// x(/(?<name1>)(?<name2>)(?<name3>)(?<name4>)(?<name5>)(?<name6>)(?<name7>)(?<name8>)(?<name9>)(?<name10>)(?<name11>)(?<name12>)(?<name13>)(?<name14>)(?<name15>)(?<name16>aaa)(?<name17>)$/, 'aaa', 0, 3, 16)

	// x(/(?<foo>a|\(\g<foo>\))/, 'a', 0, 1)
	// x(/(?<foo>a|\(\g<foo>\))/, '((((((a))))))', 0, 13)
	// x(/(?<foo>a|\(\g<foo>\))/, '((((((((a))))))))', 0, 17, 1)
	// x(/\g<bar>|\zEND(?<bar>.*abc$)/, 'abcxxxabc', 0, 9)
	// x(/\g<1>|\zEND(.a.)/, 'bac', 0, 3)
	// x(/\g<_A>\g<_A>|\zEND(.a.)(?<_A>.b.)/, 'xbxyby', 3, 6, 1)
	// x(/\A(?:\g<pon>|\g<pan>|\zEND  (?<pan>a|c\g<pon>c)(?<pon>b|d\g<pan>d))$/, 'cdcbcdc', 0, 7)
	// x(/\A(?<n>|a\g<m>)\z|\zEND (?<m>\g<n>)/, 'aaaa', 0, 4)
	// x(/(?<n>(a|b\g<n>c){3,5})/, 'baaaaca', 1, 5)
	// x(/(?<n>(a|b\g<n>c){3,5})/, 'baaaacaaaaa', 0, 10)
	// x(/(?<pare>\(([^\(\)]++|\g<pare>)*+\))/, '((a))', 0, 5)

	// TODO
	// x(/()*\1/, '', 0, 0)
	// x(/(?:()|())*\1\2/, '', 0, 0)
	// x(/(?:\1a|())*/, 'a', 0, 0, 1)
	// x(/x((.)*)*x/, '0x1x2x3', 1, 6)
	// x(/x((.)*)*x(?i:\1)\Z/, '0x1x2x1X2', 1, 9)
	// x(/(?:()|()|()|()|()|())*\2\5/, '', 0, 0)
	// x(/(?:()|()|()|(x)|()|())*\2b\5/, 'b', 0, 1)

	// r(//, '', 0)
	// r(/a/, 'a', 0)
	// r(/a/, 'a', 0, 1)
	// r(/b/, 'abc', 1)
	// r(/b/, 'abc', 1, 2)
	// r(/./, 'a', 0)
	// r(/.*/, 'abcde fgh', 9)
	// r(/a*/, 'aaabbc', 6)
	// r(/a+/, 'aaabbc', 2)
	// r(/a?/, 'bac', 3)
	// r(/a??/, 'bac', 3)
	// r(/abcde/, 'abcdeavcd', 0)
	// r(/\w\d\s/, '  a2 aa $3 ', 2)
	// r(/[c-f]aa[x-z]/, '3caaycaaa', 1)
	// r(/(?i:fG)g/, 'fGgFggFgG', 3)
	// r(/a|b/, 'b', 0)
	// r(/ab|bc|cd/, 'bcc', 0)
	// r(/(ffy)\1/, 'ffyffyffy', 3)
	// r(/|z/, 'z', 1)
	// r(/^az/, 'azaz', 0)
	// r(/az$/, 'azaz', 2)
	// r(/(((.a)))\3/, 'zazaaa', 0)
	// r(/(ac*?z)\1/, 'aacczacczacz', 1)
	// r(/aaz{3,4}/, 'bbaabbaazzzaazz', 6)
	// r(/\000a/, "b\000a", 1)
	// r(/ff\xfe/, "fff\xfe", 1)
	// r(/...abcdefghijklmnopqrstuvwxyz/, 'zzzzzabcdefghijklmnopqrstuvwxyz', 2)

	// x(/\xED\xF2/, "\xed\xf2", 0, 2)
	// x(//, 'あ', 0, 0)
	x(t, `あ`, "あ", 0, 1)
	n(t, `い`, `あ`)
	x(t, `うう`, `うう`, 0, 2)
	x(t, `あいう`, `あいう`, 0, 3)
	// x(/こここここここここここここここここここここここここここここここここここ/, 'こここここここここここここここここここここここここここここここここここ', 0, 70)
	x(t, `あ`, `いあ`, 1, 1)
	x(t, `いう`, `あいう`, 1, 2)
	// x(t, `\xca\xb8`, `\xca\xb8`, 0, 2)
	x(t, `.`, `あ`, 0, 1)
	x(t, `..`, `かき`, 0, 2)
	// x(/(?u)\w/, 'お', 0, 2)
	// n(/(?u)\W/, 'あ')
	// x(/(?u)[\W]/, 'う$', 2, 3)
	x(t, `\S`, `そ`, 0, 1)
	x(t, `\S`, `漢`, 0, 1)
	x(t, `\b`, `気 `, 0, 0)
	x(t, `\b`, ` ほ`, 1, 0)
	x(t, `\B`, `せそ `, 1, 0)
	x(t, `\B`, `う `, 2, 0)
	x(t, `\B`, ` い`, 0, 0)
	x(t, `[たち]`, `ち`, 0, 1)
	n(t, `[なに]`, `ぬ`)
	x(t, `[う-お]`, `え`, 0, 1)
	n(t, `[^け]`, `け`)
	// x(/(?u)[\w]/, 'ね', 0, 2)
	n(t, `[\d]`, `ふ`)
	x(t, `[\D]`, `は`, 0, 1)
	n(t, `[\s]`, `く`)
	x(t, `[\S]`, `へ`, 0, 1)
	// x(/(?u)[\w\d]/, 'よ', 0, 2)
	// x(/(?u)[\w\d]/, '   よ', 3, 5)
	// #x(/[\xa4\xcf-\xa4\xd3]/, "\xa4\xd0", 0, 2)  # diff spec with GNU regex.
	// #n(/[\xb6\xe7-\xb6\xef]/, "\xb6\xe5")        # diff spec with GNU regex.
	// n(/(?u)\w鬼車/, ' 鬼車')
	// x(/(?u)鬼\W車/, '鬼 車', 0, 5)
	x(t, `あ.い.う`, `ああいいう`, 0, 5)
	// x(/(?u).\wう\W..ぞ/, 'えうう うぞぞ', 0, 13)
	// x(/(?u)\s\wこここ/, ' ここここ', 0, 9)
	x(t, `ああ.け`, `ああけけ`, 0, 4)
	n(t, `.い`, `いえ`)
	x(t, `.お`, `おお`, 0, 2)
	x(t, `^あ`, `あ`, 0, 1)
	x(t, `^む$`, `む`, 0, 1)
	// x(/(?u)^\w$/, 'に', 0, 2)
	// x(/(?u)^\wかきくけこ$/, 'zかきくけこ', 0, 11)
	// x(/(?u)^\w...うえお$/, 'zあいううえお', 0, 13)
	// x(/(?u)\w\w\s\Wおおお\d/, 'aお  おおお4', 0, 12)
	x(t, `\Aたちつ`, `たちつ`, 0, 3)
	// x(t, `むめも\Z`, `むめも`, 0, 3)
	x(t, `かきく\z`, `かきく`, 0, 3)
	x(t, `かきく\Z`, "かきく\n", 0, 3)
	// x(t, `\Gぽぴ`, `ぽぴ`, 0, 4)
	// n(t, `\Gえ`, `うえお`)
	// n(t, `とて\G`, `とて`)
	n(t, `まみ\A`, `まみ`)
	n(t, `ま\Aみ`, `まみ`)
	x(t, `(?=せ)せ`, `せ`, 0, 1)
	n(t, `(?=う).`, `い`)
	x(t, `(?!う)か`, `か`, 0, 1)
	n(t, `(?!と)あ`, `と`)
	x(t, `(?i:あ)`, "あ", 0, 1)
	x(t, `(?i:ぶべ)`, `ぶべ`, 0, 2)
	n(t, `(?i:い)`, "う")
	x(t, `(?m:よ.)`, "よ\n", 0, 2)
	x(t, `(?m:.め)`, "ま\nめ", 1, 2)
	x(t, `あ?`, ``, 0, 0)
	x(t, `変?`, `化`, 0, 0)
	x(t, `変?`, `変`, 0, 1)
	x(t, `量*`, ``, 0, 0)
	x(t, `量*`, `量`, 0, 1)
	x(t, `子*`, `子子子`, 0, 3)
	x(t, `馬*`, `鹿馬馬馬馬`, 0, 0)
	n(t, `山+`, "")
	x(t, `河+`, `河`, 0, 1)
	x(t, `時+`, `時時時時`, 0, 4)
	x(t, `え+`, `ええううう`, 0, 2)
	x(t, `う+`, `おうううう`, 1, 4)
	x(t, `.?`, `た`, 0, 1)
	x(t, `.*`, `ぱぴぷぺ`, 0, 4)
	x(t, `.+`, `ろ`, 0, 1)
	x(t, `.+`, "いうえか\n", 0, 4)
	x(t, `あ|い`, `あ`, 0, 1)
	x(t, `あ|い`, `い`, 0, 1)
	x(t, `あい|いう`, `あい`, 0, 2)
	x(t, `あい|いう`, `いう`, 0, 2)
	x(t, `を(?:かき|きく)`, `をかき`, 0, 3)
	x(t, `を(?:かき|きく)け`, `をきくけ`, 0, 4)
	x(t, `あい|(?:あう|あを)`, `あを`, 0, 2)
	x(t, `あ|い|う`, `えう`, 1, 1)
	x(t, `あ|い|うえ|おかき|く|けこさ|しすせ|そ|たち|つてとなに|ぬね`, `しすせ`, 0, 3)
	n(t, `あ|い|うえ|おかき|く|けこさ|しすせ|そ|たち|つてとなに|ぬね`, `すせ`)
	x(t, `あ|^わ`, `ぶあ`, 1, 1)
	x(t, `あ|^を`, `をあ`, 1, 1)
	// x(/鬼|\G車/, 'け車鬼', 4, 6)
	// x(/鬼|\G車/, '車鬼', 0, 2)
	x(t, `鬼|\A車`, `b車鬼`, 2, 1)
	x(t, `鬼|\A車`, `車`, 0, 1)
	x(t, `鬼|車\Z`, `車鬼`, 1, 1)
	x(t, `鬼|車\Z`, `車`, 0, 1)
	x(t, `鬼|車\Z`, "車\n", 0, 1)
	x(t, `鬼|車\z`, `車鬼`, 1, 1)
	x(t, `鬼|車\z`, `車`, 0, 1)
	// x(/(?u)\w|\s/, 'お', 0, 2)
	// x(/(?u)\w|%/, '%お', 0, 1)
	// x(/(?u)\w|[&$]/, 'う&', 0, 2)
	x(t, `[い-け]`, `う`, 0, 1)
	x(t, `[い-け]|[^か-こ]`, `あ`, 0, 1)
	x(t, `[い-け]|[^か-こ]`, `か`, 0, 1)
	x(t, `[^あ]`, "\n", 0, 1)
	x(t, `(?:あ|[う-き])|いを`, `うを`, 0, 1)
	x(t, `(?:あ|[う-き])|いを`, `いを`, 0, 2)

	// x(/あいう|(?=けけ)..ほ/, 'けけほ', 0, 6)
	// x(/あいう|(?!けけ)..ほ/, 'あいほ', 0, 6)
	// x(/(?=をあ)..あ|(?=をを)..あ/, 'ををあ', 0, 6)
	// x(/(?<=あ|いう)い/, 'いうい', 4, 6)
	// n(/(?>あ|あいえ)う/, 'あいえう')
	// x(/(?>あいえ|あ)う/, 'あいえう', 0, 8)

	x(t, `あ?|い`, `あ`, 0, 1)
	x(t, `あ?|い`, `い`, 0, 0)
	x(t, `あ?|い`, ``, 0, 0)
	x(t, `あ*|い`, `ああ`, 0, 2)
	// x(t, `あ*|い*`, `いあ`, 0, 0) // TODO
	// x(t, `あ*|い*`, `あい`, 0, 1) // TODO
	// x(/[aあ]*|い*/, 'aあいいい', 0, 3)
	// x(/あ+|い*/, '', 0, 0)
	x(t, `あ+|い*`, `いいい`, 0, 3)
	x(t, `あ+|い*`, `あいいい`, 0, 1)
	x(t, `あ+|い*`, `aあいいい`, 0, 0)
	n(t, `あ+|い+`, ``)
	x(t, `(あ|い)?`, `い`, 0, 1)
	x(t, `(あ|い)*`, `いあ`, 0, 2)
	x(t, `(あ|い)+`, `いあい`, 0, 3)
	x(t, `(あい|うあ)+`, `うああいうえ`, 0, 4)
	x(t, `(あい|うえ)+`, `うああいうえ`, 2, 4)
	x(t, `(あい|うあ)+`, `ああいうあ`, 1, 4)
	x(t, `(あい|うあ)+`, `あいをうあ`, 0, 2)
	// x(/(あい|うあ)+/, '$$zzzzあいをうあ', 6, 10)
	x(t, `(あ|いあい)+`, `あいあいあ`, 0, 5)
	// x(/(あ|いあい)+/, 'いあ', 2, 4)
	// x(/(あ|いあい)+/, 'いあああいあ', 2, 8)
	x(t, `(?:あ|い)(?:あ|い)`, `あい`, 0, 2)
	x(t, `(?:あ*|い*)(?:あ*|い*)`, `あああいいい`, 0, 6)
	x(t, `(?:あ*|い*)(?:あ+|い+)`, `あああいいい`, 0, 6)
	x(t, `(?:あ+|い+){2}`, `あああいいい`, 0, 6)
	x(t, `(?:あ+|い+){1,2}`, `あああいいい`, 0, 6)
	// x(t, `(?:あ+|\Aい*)うう`, `うう`, 0, 2) // TODO
	n(t, `(?:あ+|\Aい*)うう`, `あいうう`)
	// x(/(?:^あ+|い+)*う/, 'ああいいいあいう', 12, 16)
	// x(/(?:^あ+|い+)*う/, 'ああいいいいう', 0, 14)
	x(t, `う{0,}`, `うううう`, 0, 4)
	x(t, `あ|(?i)c`, "C", 0, 1)
	x(t, `(?i)c|あ`, "C", 0, 1)
	x(t, `(?i:あ)|a`, "a", 0, 1)
	n(t, `(?i:あ)|a`, "A")
	x(t, `[あいう]?`, `あいう`, 0, 1)
	x(t, `[あいう]*`, `あいう`, 0, 3)
	x(t, `[^あいう]*`, `あいう`, 0, 0)
	n(t, `[^あいう]+`, `あいう`)

	// not implemented yet
	// x(/あ??/, 'あああ', 0, 0)
	// x(/いあ??い/, 'いあい', 0, 6)
	// x(/あ*?/, 'あああ', 0, 0)
	// x(/いあ*?/, 'いああ', 0, 2)
	// x(/いあ*?い/, 'いああい', 0, 8)
	// x(/あ+?/, 'あああ', 0, 2)
	// x(/いあ+?/, 'いああ', 0, 4)
	// x(/いあ+?い/, 'いああい', 0, 8)
	// x(/(?:天?)??/, '天', 0, 0)
	// x(/(?:天??)?/, '天', 0, 0)
	// x(/(?:夢?)+?/, '夢夢夢', 0, 2)
	// x(/(?:風+)??/, '風風風', 0, 0)
	// x(/(?:雪+)??霜/, '雪雪雪霜', 0, 8)
	// i(/(?:あい)?{2}/, '', 0, 0)   # GNU regex bug
	// x(/(?:鬼車)?{2}/, '鬼車鬼車鬼', 0, 8)
	// x(/(?:鬼車)*{0}/, '鬼車鬼車鬼', 0, 0)
	x(t, `(?:鬼車){3,}`, `鬼車鬼車鬼車鬼車`, 0, 8)
	n(t, `(?:鬼車){3,}`, `鬼車鬼車`)
	x(t, `(?:鬼車){2,4}`, `鬼車鬼車鬼車`, 0, 6)
	x(t, `(?:鬼車){2,4}`, `鬼車鬼車鬼車鬼車鬼車`, 0, 8)
	// x(/(?:鬼車){2,4}?/, '鬼車鬼車鬼車鬼車鬼車', 0, 8)
	// x(/(?:鬼車){,}/, '鬼車{,}', 0, 7)
	// x(/(?:かきく)+?{2}/, 'かきくかきくかきく', 0, 12)

	x(t, `(火)`, `火`, 0, 1)
	x(t, `(火水)`, `火水`, 0, 2)
	x(t, `((時間))`, `時間`, 0, 2)
	x(t, `((風水))`, `風水`, 0, 2)
	x(t, `((昨日))`, `昨日`, 0, 2)
	x(t, `((((((((((((((((((((量子))))))))))))))))))))`, `量子`, 0, 2)
	x(t, `(あい)(うえ)`, `あいうえ`, 0, 4)
	// x(/(あい)(うえ)/, 'あいうえ', 4, 8, 2)
	// x(/()(あ)いう(えおか)きくけこ/, 'あいうえおかきくけこ', 6, 12, 3)
	// x(/(()(あ)いう(えおか)きくけこ)/, 'あいうえおかきくけこ', 6, 12, 4)
	// x(/.*(フォ)ン・マ(ン()シュタ)イン/, 'フォン・マンシュタイン', 10, 18, 2)
	x(t, `(^あ)`, `あ`, 0, 1)
	x(t, `(あ)|(あ)`, `いあ`, 1, 1)
	x(t, `(^あ)|(あ)`, `いあ`, 1, 1)
	x(t, `(あ?)`, `あああ`, 0, 1)
	x(t, `(ま*)`, `ままま`, 0, 3)
	// x(/(と*)/, '', 0, 0, 1)
	x(t, `(る+)`, `るるるるるるる`, 0, 7)
	x(t, `(ふ+|へ*)`, `ふふふへへ`, 0, 3)
	x(t, `(あ+|い?)`, `いいいああ`, 0, 1)
	x(t, `(あいう)?`, `あいう`, 0, 3)
	x(t, `(あいう)*`, `あいう`, 0, 3)
	x(t, `(あいう)+`, `あいう`, 0, 3)
	x(t, `(さしす|あいう)+`, `あいう`, 0, 3)
	x(t, `([なにぬ][かきく]|かきく)+`, `かきく`, 0, 3)

	// x(/((?i:あいう))/, 'あいう', 0, 6, 1)
	// x(/((?m:あ.う))/, "あ\nう", 0, 5, 1)
	// x(/((?=あん)あ)/, 'あんい', 0, 2, 1)

	x(t, `あいう|(.あいえ)`, `んあいえ`, 0, 4)
	x(t, `あ*(.)`, `ああああん`, 0, 5)

	// x(/あ*?(.)/, 'ああああん', 0, 2, 1)
	// x(/あ*?(ん)/, 'ああああん', 8, 10, 1)

	x(t, `[いうえ]あ*(.)`, `えああああん`, 0, 6)
	x(t, `(\Aいい)うう`, `いいうう`, 0, 4)
	n(t, `(\Aいい)うう`, `んいいうう`)
	x(t, `(^いい)うう`, `いいうう`, 0, 4)
	n(t, `(^いい)うう`, `んいいうう`)
	x(t, `ろろ(るる$)`, `ろろるる`, 0, 4)
	n(t, `ろろ(るる$)`, `ろろるるる`)
	x(t, `(無)\1`, `無無`, 0, 2)
	n(t, `(無)\1`, `無武`)
	x(t, `(空?)\1`, `空空`, 0, 2)
	// x(/(空??)\1/, '空空', 0, 0)
	x(t, `(空*)\1`, `空空空空空`, 0, 4)
	// x(/(空*)\1/, '空空空空空', 0, 4, 1)
	x(t, `あ(い*)\1`, `あいいいい`, 0, 5)
	// x(/あ(い*)\1/, 'あい', 0, 2)
	x(t, `(あ*)(い*)\1\2`, `あああいいあああいい`, 0, 10)
	x(t, `(あ*)(い*)\2`, `あああいいいい`, 0, 7)
	// x(/(あ*)(い*)\2/, 'あああいいいい', 6, 10, 2)
	// x(/(((((((ぽ*)ぺ))))))ぴ\7/, 'ぽぽぽぺぴぽぽぽ', 0, 16)
	// x(/(((((((ぽ*)ぺ))))))ぴ\7/, 'ぽぽぽぺぴぽぽぽ', 0, 6, 7)
	// x(/(は)(ひ)(ふ)\2\1\3/, 'はひふひはふ', 0, 12)
	x(t, `([き-け])\1`, `くく`, 0, 2)
	// x(/(?u)(\w\d\s)\1/, 'あ5 あ5 ', 0, 8)
	// n(/(?u)(\w\d\s)\1/, 'あ5 あ5')
	// x(/(誰？|[あ-う]{3})\1/, '誰？誰？', 0, 8)
	// x(/...(誰？|[あ-う]{3})\1/, 'あaあ誰？誰？', 0, 13)
	// x(/(誰？|[あ-う]{3})\1/, 'ういうういう', 0, 12)
	x(t, `(^こ)\1`, `ここ`, 0, 2)
	n(t, `(^む)\1`, `めむむ`)
	n(t, `(あ$)\1`, `ああ`)
	n(t, `(あい\Z)\1`, `あい`)
	// x(t, `(あ*\Z)\1`, `あ`, 2, 0) // TODO
	// x(/.(あ*\Z)\1/, 'いあ', 2, 4)
	// x(/(.(やいゆ)\2)/, 'zやいゆやいゆ', 0, 13, 1)
	// x(/(.(..\d.)\2)/, 'あ12341234', 0, 10, 1)
	// x(/((?i:あvず))\1/, 'あvずあvず', 0, 10)
	// x(/(?<愚か>変|\(\g<愚か>\))/, '((((((変))))))', 0, 14)
	// x(/\A(?:\g<阿_1>|\g<云_2>|\z終了  (?<阿_1>観|自\g<云_2>自)(?<云_2>在|菩薩\g<阿_1>菩薩))$/, '菩薩自菩薩自在自菩薩自菩薩', 0, 26)
	x(t, `[[ひふ]]`, `ふ`, 0, 1)
	x(t, `[[いおう]か]`, `か`, 0, 1)
	n(t, `[[^あ]]`, `あ`)
	n(t, `[^[あ]]`, `あ`)
	x(t, `[^[^あ]]`, `あ`, 0, 1)
	// x(/[[かきく]&&きく]/, 'く', 0, 2)
	// n(/[[かきく]&&きく]/, 'か')
	// n(/[[かきく]&&きく]/, 'け')
	// x(/[あ-ん&&い-を&&う-ゑ]/, 'ゑ', 0, 2)
	// n(/[^あ-ん&&い-を&&う-ゑ]/, 'ゑ')
	// x(/[[^あ&&あ]&&あ-ん]/, 'い', 0, 2)
	// n(/[[^あ&&あ]&&あ-ん]/, 'あ')
	// x(/[[^あ-ん&&いうえお]&&[^う-か]]/, 'き', 0, 2)
	// n(/[[^あ-ん&&いうえお]&&[^う-か]]/, 'い')
	// x(/[^[^あいう]&&[^うえお]]/, 'う', 0, 2)
	// x(/[^[^あいう]&&[^うえお]]/, 'え', 0, 2)
	// n(/[^[^あいう]&&[^うえお]]/, 'か')
	// x(/[あ-&&-あ]/, '-', 0, 1)
	// x(/[^[^a-zあいう]&&[^bcdefgうえお]q-w]/, 'え', 0, 2)
	// x(/[^[^a-zあいう]&&[^bcdefgうえお]g-w]/, 'f', 0, 1)
	// x(/[^[^a-zあいう]&&[^bcdefgうえお]g-w]/, 'g', 0, 1)
	// n(/[^[^a-zあいう]&&[^bcdefgうえお]g-w]/, '2')
	// x(t, `a<b>バージョンのダウンロード<\/b>`, `a<b>バージョンのダウンロード</b>`, 0, 16)
	// x(t, `.<b>バージョンのダウンロード<\/b>`, `a<b>バージョンのダウンロード</b>`, 0, 16)

	// r(/あ/, 'あ', 0)
	// r(/あ/, 'あ', 0, 2)
	// r(/い/, 'あいう', 2)
	// r(/い/, 'あいう', 2, 4)
	// r(/./, 'あ', 0)
	// r(/.*/, 'あいうえお かきく', 17)
	// r(/.*えお/, 'あいうえお かきく', 6)
	// r(/あ*/, 'あああいいう', 12)
	// r(/あ+/, 'あああいいう', 4)
	// r(/あ?/, 'いあう', 6)
	// r(/全??/, '負全変', 6)
	// r(/a辺c漢e/, 'a辺c漢eavcd', 0)
	// r(/(?u)\w\d\s/, '  あ2 うう $3 ', 2)
	// r(/[う-お]ああ[と-ん]/, '3うああなうあああ', 1)
	// r(/あ|い/, 'い', 0)
	// r(/あい|いう|うえ/, 'いうう', 0)
	// r(/(ととち)\1/, 'ととちととちととち', 6)
	// r(/|え/, 'え', 2)
	// r(/^あず/, 'あずあず', 0)
	// r(/あず$/, 'あずあず', 4)
	// r(/(((.あ)))\3/, 'zあzあああ', 0)
	// r(/(あう*?ん)\1/, 'ああううんあううんあうん', 2)
	// r(/ああん{3,4}/, 'ててああいいああんんんああんああん', 12)
	// r(/\000あ/, "い\000あ", 2)
	// r(/とと\xfe\xfe/, "ととと\xfe\xfe", 2)
	// r(/...あいうえおかきくけこさしすせそ/, 'zzzzzあいうえおかきくけこさしすせそ', 2)
}

func report(t testing.TB, isOk bool, result, reg, str string, ranges ...int) {
	t.Helper()

	format := t.Logf
	if !isOk {
		format = t.Errorf
	}

	t.Logf("%s /%s/ : '%s'", result, reg, str)

	if len(ranges) > 0 {
		if len(ranges) == 2 {
			format(" (%d-%d : X-X)", ranges[0], ranges[1])
		} else if len(ranges) == 4 {
			format(" (%d-%d : %d-%d)", ranges[0], ranges[1], ranges[2], ranges[3])
		}
	}
}

func reportOK(t testing.TB, resultOpt, reg, str string, ranges ...int) {
	t.Helper()

	result := "OK" + resultOpt
	result += strings.Repeat(" ", 7-len(result)) // Pad with spaces
	report(t, true, result, reg, str, ranges...)
}

func reportFail(t testing.TB, resultOpt, reg, str string, ranges ...int) {
	t.Helper()

	result := "FAIL" + resultOpt
	result += strings.Repeat(" ", 7-len(result)) // Pad with spaces
	report(t, false, result, reg, str, ranges...)
}

func n(t *testing.T, expression, str string) {
	t.Helper()

	t.Run("must not match "+expression+" and "+str, func(t *testing.T) {
		t.Parallel()

		tr := cliche.New(onigmo.Parser)

		err := tr.Add(expression)
		if err != nil {
			t.Fatal(err)
		}

		t.Log("tree", tr)

		matches := tr.Match(str)
		t.Log("matches count", len(matches))

		if len(matches) == 0 {
			reportOK(t, "", expression, str, 0)
		} else {
			reportFail(t, "", expression, str, 0)
			t.Fatal()
		}
	})
}

func x(t *testing.T, expression, str string, start, size int) {
	t.Helper()

	t.Run("must match "+expression+" and "+str, func(t *testing.T) {
		t.Parallel()

		tr := cliche.New(onigmo.Parser)

		err := tr.Add(expression)
		if err != nil {
			t.Fatal(err)
		}

		t.Log("tree", tr)

		matches := tr.Match(str)
		t.Log("matches count", len(matches))

		for n, match := range matches {
			t.Log("span", match.Span(), match.Span().From(), match.Span().Size())

			if match.Span().From() == start && match.Span().Size() == size {
				reportOK(t, "", expression, str, n)
				return
			}
		}

		reportFail(t, "", expression, str)
		t.Fatal()
	})
}
