package cliche

import (
	"strings"
	"testing"
)

func TestOnigmo(t *testing.T) {
	t.Parallel()

	// x(t, ``, "", 0, 0)
	x(t, `^`, "", 0, 0)
	x(t, `$`, "", 0, 0)
	x(t, `\A`, "", 0, 0)
	x(t, `\z`, "", 0, 0)
	x(t, `^$`, "", 0, 0)
	// x(/\ca/, "\001", 0, 1)
	// x(/\C-b/, "\002", 0, 1)
	// x(/\c\\/, "\034", 0, 1)
	// x(/q[\c\\]/, "q\034", 0, 2)

	// x(t, ``, "a", 0, 0)
	x(t, `a`, "a", 0, 1)
	x(t, `\x61`, "a", 0, 1)
	x(t, `aa`, "aa", 0, 2)
	x(t, `aaa`, "aaa", 0, 3)
	x(t, `aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 0, 35)
	x(t, "ab", "ab", 0, 2)
	// x(t, "b", "ab", 1, 2)
	// x(t, "bc", "abc", 1, 3, 0)
	// x(t, "(?i:#RET#)", "#INS##RET#", 5, 10)
	// x(t, "\17", "\017", 0, 1)

	x(t, "\x1f", "\x1f", 0, 1)
	// x(t, /a(?#....\\JJJJ)b/, "ab", 0, 2)
	// x(t, "(?x)\ta .\n+b", "0a123b4", 1, 6, 0)

	// x(t, `(?x)  G (o O(?-x)oO) g L`, `GoOoogLe`, 0, 7)
	x(t, `.`, "a", 0, 1)
	n(t, `.`, "")
	x(t, `..`, "ab", 0, 2)
	x(t, `\w`, "e", 0, 1)
	n(t, `\W`, "e")
	x(t, `\s`, " ", 0, 1)
	x(t, `\S`, "b", 0, 1)
	x(t, `\d`, "4", 0, 1)
	n(t, `\D`, "4")
	// x(t, `\b`, "z ", 0, 0)
	// x(t, `\b`, " z", 1, 1)
	// x(t, `\B`, "zz ", 1, 1)
	// x(t, `\B`, 'z ', 2, 2)
	// x(t, `\B`, ' z', 0, 0)
	x(t, `[ab]`, "b", 0, 1)
	n(t, `[ab]`, "c")
	x(t, `[a-z]`, "t", 0, 1)
	n(t, `[^a]`, "a")
	x(t, `[^a]`, "\n", 0, 1)
	// x(t, `[]]`, "]", 0, 1)
	// n(t, `[^]]`, ']')
	// x(t, `[\^]+`, "0^^1", 1, 3)
	x(t, `[b-]`, "b", 0, 1)
	x(t, `[b-]`, "-", 0, 1)
	x(t, `[\w]`, "z", 0, 1)
	n(t, `[\w]`, " ")
	// x(t, "[\W]", "b$", 1, 2)
	x(t, `[\d]`, "5", 0, 1)
	n(t, `[\d]`, "e")
	x(t, `[\D]`, "t", 0, 1)
	n(t, `[\D]`, "3")
	x(t, `[\s]`, " ", 0, 1)
	n(t, `[\s]`, "a")
	x(t, `[\S]`, "b", 0, 1)
	n(t, `[\S]`, " ")
	x(t, `[\w\d]`, "2", 0, 1)
	n(t, `[\w\d]`, " ")
	x(t, `[[:upper:]]`, "B", 0, 1)
	x(t, `[*[:xdigit:]+]`, `+`, 0, 1)
	// x(t, /[*[:xdigit:]+]/, 'GHIKK-9+*', 6, 7)
	// x(t, /[*[:xdigit:]+]/, '-@^+', 3, 4)
	n(t, `[[:upper]]`, "A")

	x(t, `[[:upper]]`, ":", 0, 1)

	// x(t, `[\044-\047]`, "\046", 0, 1) // TODO : rande parsing error
	x(t, `[\x5a-\x5c]`, "[", 0, 1)
	x(t, `[\x6A-\x6D]`, "l", 0, 1)
	n(t, `[\x6A-\x6D]`, "n")

	n(t, `^[0-9A-F]+ 0+ UNDEF `, "75F 00000000 SECT14A notype ()    External    | _rb_apply")
	x(t, `[\[]`, "[", 0, 1)
	x(t, `[\]]`, "]", 0, 1)
	x(t, `[&]`, "&", 0, 1)
	x(t, `[[ab]]`, `b`, 0, 1)
	x(t, `[[ab]c]`, `c`, 0, 1)
	n(t, `[[^a]]`, `a`)
	n(t, `[^[a]]`, `a`)

	// not implemented yet
	// x(t, `[[ab]&&bc]`, 'b', 0, 1)
	// n(t, `[[ab]&&bc]`, 'a')
	// n(t, `[[ab]&&bc]`, 'c')
	// x(t, `[a-z&&b-y&&c-x]`, 'w', 0, 1)
	// n(t, `[^a-z&&b-y&&c-x]`, 'w')
	// x(t, `[[^a&&a]&&a-z]`, 'b', 0, 1)
	// n(t, `[[^a&&a]&&a-z]`, 'a')
	// x(t, `[[^a-z&&bcdef]&&[^c-g]]`, 'h', 0, 1)
	// n(t, `[[^a-z&&bcdef]&&[^c-g]]`, 'c')
	// x(t, `[^[^abc]&&[^cde]]`, 'c', 0, 1)
	// x(t, `[^[^abc]&&[^cde]]`, 'e', 0, 1)
	// n(t, `[^[^abc]&&[^cde]]`, 'f')
	// x(t, `[a-&&-a]`, '-', 0, 1)
	// n(t, `[a\-&&\-a]`, '&')

	n(t, `\wabc`, " abc")
	x(t, `a\Wbc`, "a bc", 0, 4)
	x(t, `a.b.c`, "aabbc", 0, 5)
	x(t, `.\wb\W..c`, "abb bcc", 0, 7)
	x(t, `\s\wzzz`, " zzzz", 0, 5)
	x(t, `aa.b`, "aabb", 0, 4)
	n(t, `.a`, "ab")
	x(t, `.a`, "aa", 0, 2)
	x(t, `^a`, "a", 0, 1)
	x(t, `^a$`, "a", 0, 1)
	x(t, `^\w$`, "a", 0, 1)
	n(t, `^\w$`, " ")
	x(t, `^\wab$`, "zab", 0, 3)
	x(t, `^\wabcdef$`, "zabcdef", 0, 7)
	x(t, `^\w...def$`, "zabcdef", 0, 7)
	x(t, `\w\w\s\Waaa\d`, "aa  aaa4", 0, 8)
	// x(t, `\A\Z`, "", 0, 0)
	x(t, `\Axyz`, "xyz", 0, 3)
	// x(t, `xyz\Z`, "xyz", 0, 3) // not implemented yet
	x(t, `xyz\z`, "xyz", 0, 3)
	// x(t, `a\Z`, "a", 0, 1) // not implemented yet
	// x(t, /\Gaz/, 'az', 0, 2)
	// n(t, /\Gz/, 'bza')
	// n(t, /az\G/, 'az')
	// n(t, /az\A/, 'az')
	// n(t, /a\Az/, 'az')
	x(t, `\^\$`, "^$", 0, 2)
	x(t, `^x?y`, "xy", 0, 2)
	x(t, `^(x?y)`, "xy", 0, 2)
	x(t, `\w`, "_", 0, 1)
	n(t, `\W`, "_")
	x(t, `(?=z)z`, "z", 0, 1)
	n(t, `(?=z).`, "a")
	x(t, `(?!z)a`, "a", 0, 1)
	n(t, `(?!z)a`, "z")

	// not implemented yet
	// x(t, /(?i:a)/, 'a', 0, 1)
	// x(t, /(?i:a)/, 'A', 0, 1)
	// x(t, /(?i:A)/, 'a', 0, 1)
	// n(t, /(?i:A)/, 'b')
	// x(t, /(?i:[A-Z])/, 'a', 0, 1)
	// x(t, /(?i:[f-m])/, 'H', 0, 1)
	// x(t, /(?i:[f-m])/, 'h', 0, 1)
	// n(t, /(?i:[f-m])/, 'e')
	// x(t, /(?i:[A-c])/, 'D', 0, 1)

	// #n(/(?i:[a-C])/, 'D')   # changed spec.(error) 2003/09/17
	// #n(/(?i:[b-C])/, 'A')
	// #x(/(?i:[a-C])/, 'B', 0, 1)
	// #n(/(?i:[c-X])/, '[')

	// n(/(?i:[^a-z])/, 'A')
	// n(/(?i:[^a-z])/, 'a')
	// x(/(?i:[!-k])/, 'Z', 0, 1)
	// x(/(?i:[!-k])/, '7', 0, 1)
	// x(/(?i:[T-}])/, 'b', 0, 1)
	// x(/(?i:[T-}])/, '{', 0, 1)
	// x(/(?i:\?a)/, '?A', 0, 2)
	// x(/(?i:\*A)/, '*a', 0, 2)

	n(t, `.`, "\n") // important
	// x(/(?m:.)/, "\n", 0, 1)
	// x(/(?m:a.)/, "a\n", 0, 2)
	// x(/(?m:.b)/, "a\nb", 1, 3)

	// x(/.*abc/, "dddabdd\nddabc", 8, 13)
	// x(/(?m:.*abc)/, "dddabddabc", 0, 10)
	// n(/(?i)(?-i)a/, "A")
	// n(/(?i)(?-i:a)/, "A")

	x(t, `a?`, "", 0, 0)
	x(t, `a?`, "b", 0, 0)
	x(t, `a?`, "a", 0, 1)
	x(t, `a*`, "", 0, 0)
	x(t, `a*`, "a", 0, 1)
	x(t, `a*`, "aaa", 0, 3)
	x(t, `a*`, "baaaa", 0, 0)

	n(t, `a+`, "")
	x(t, `a+`, "a", 0, 1)
	x(t, `a+`, "aaaa", 0, 4)
	x(t, `a+`, "aabbb", 0, 2)
	// x(t, `a+`, "baaaa", 1, 5)

	x(t, `.?`, ``, 0, 0)
	x(t, `.?`, "f", 0, 1)
	x(t, `.?`, "\n", 0, 0)
	x(t, `.*`, "", 0, 0)
	x(t, `.*`, "abcde", 0, 5)
	x(t, `.+`, "z", 0, 1)
	x(t, `.+`, "zdswer\n", 0, 6)
	x(t, `(.*)a\1f`, "babfbac", 0, 4)
	// x(/(.*)a\1f/, "bacbabf", 3, 7)
	// x(/((.*)a\2f)/, "bacbabf", 3, 7)
	// x(/(.*)a\1f/, "baczzzzzz\nbazz\nzzzzbabf", 19, 23)
	x(t, `a|b`, "a", 0, 1)
	x(t, `a|b`, "b", 0, 1)

	// x(t, `|a`, "a", 0, 0) // wtf (check bnf / ebnf)
	// x(t `(|a)`, 'a', 0, 0)

	x(t, `ab|bc`, "ab", 0, 2)
	x(t, `ab|bc`, "bc", 0, 2)

	x(t, `z(?:ab|bc)`, "zbc", 0, 3)
	x(t, `a(?:ab|bc)c`, "aabc", 0, 4)
	x(t, `ab|(?:ac|az)`, "az", 0, 2)
	// x(t, `a|b|c`, "dc", 1, 2)
	x(t, `a|b|cd|efg|h|ijk|lmn|o|pq|rstuvwx|yz`, "pqr", 0, 2)
	n(t, `a|b|cd|efg|h|ijk|lmn|o|pq|rstuvwx|yz`, "mn")

	// x(t, `a|^z`, "ba", 1, 2)
	// x(t, `a|^z`, "za", 0, 1) // important

	// x(/a|\Gz/, 'bza', 2, 3)
	// x(/a|\Gz/, 'za', 0, 1)
	// x(/a|\Az/, 'bza', 2, 3)
	// x(/a|\Az/, 'za', 0, 1)
	// x(/a|b\Z/, 'ba', 1, 2)
	// x(/a|b\Z/, 'b', 0, 1)

	// x(t, `a|b\z`, `ba`, 1, 2)
	x(t, `a|b\z`, `b`, 0, 1)

	x(t, `\w|\s`, " ", 0, 1)
	n(t, `\w|\w`, " ")
	x(t, `\w|%`, "%", 0, 1)
	x(t, `\w|[&$]`, "&", 0, 1)
	x(t, `[b-d]|[^e-z]`, "a", 0, 1)
	x(t, `(?:a|[c-f])|bz`, "dz", 0, 1)
	x(t, `(?:a|[c-f])|bz`, "bz", 0, 2)

	// x(t, `abc|(?=zz)..f`, "zzf", 0, 3) // TODO : panic
	x(t, `abc|(?!zz)..f`, "abf", 0, 3)

	// x(t, `(?=za)..a|(?=zz)..a`, "zza", 0, 3) // TODO : panic

	n(t, `(?>a|abd)c`, "abdc")
	x(t, `(?>abd|a)c`, "abdc", 0, 4) // pass, but why? (bound)

	// x(t, `a?|b`, `a`, 0, 1) // TODO : depend on order
	// x(t, `a?|b`, `b`, 0, 0) // TODO : depend on order
	// x(t, `a?|b`, ``, 0, 0) // TODO : depend on order
	x(t, `a*|b`, `aa`, 0, 2)
	// x(t, `a*|b*`, `ba`, 0, 0) // FAILD but why
	// x(/a*|b*/, 'ab', 0, 1)
	// x(/a+|b*/, '', 0, 0)
	// x(/a+|b*/, 'bbb', 0, 3)
	// x(t, `a+|b*`, `abbb`, 0, 1)
	n(t, `a+|b+`, "")
	x(t, `(a|b)?`, `b`, 0, 1)
	x(t, `(a|b)*`, `ba`, 0, 2)
	x(t, `(a|b)+`, `bab`, 0, 3)

	x(t, `(ab|ca)+`, "caabbc", 0, 4) // pass but why

	// x(/(ab|ca)+/, 'aabca', 1, 5)
	x(t, `(ab|ca)+`, `abzca`, 0, 2)
	x(t, `(a|bab)+`, `ababa`, 0, 5)
	// x(/(a|bab)+/, 'ba', 1, 2)
	// x(/(a|bab)+/, 'baaaba', 1, 4)
	x(t, `(?:a|b)(?:a|b)`, `ab`, 0, 2)
	// x(t, `(?:a*|b*)(?:a*|b*)`, `aaabbb`, 0, 3) // DEBUG
	x(t, `(?:a*|b*)(?:a+|b+)`, `aaabbb`, 0, 6)
	x(t, `(?:a+|b+){2}`, `aaabbb`, 0, 6)
	x(t, `h{0,}`, `hhhh`, 0, 4)
	x(t, `(?:a+|b+){1,2}`, `aaabbb`, 0, 6)
	n(t, `ax{2}*a`, `0axxxa1`)
	n(t, `a.{0,2}a`, "0aXXXa0")
	n(t, `a.{0,2}?a`, "0aXXXa0")
	n(t, `a.{0,2}?a`, "0aXXXXa0")
	// x(/^a{2,}?a$/, "aaa", 0, 3)
	// x(/^[a-z]{2,}?$/, "aaa", 0, 3)
	// x(/(?:a+|\Ab*)cc/, 'cc', 0, 2)
	n(t, `(?:a+|\Ab*)cc`, "abcc")
	// x(/(?:^a+|b+)*c/, 'aabbbabc', 6, 8)
	x(t, `(?:^a+|b+)*c`, `aabbbbc`, 0, 7)

	// options not implemented yet
	// x(/a|(?i)c/, 'C', 0, 1)
	// x(/(?i)c|a/, 'C', 0, 1)
	// i(/(?i)c|a/, 'A', 0, 1)  # different spec.
	// x(/(?i:c)|a/, 'C', 0, 1)
	// n(/(?i:c)|a/, 'A')

	// advanced quantifiers not implemented yet
	// x(/[abc]?/, 'abc', 0, 1)
	// x(/[abc]*/, 'abc', 0, 3)
	// x(/[^abc]*/, 'abc', 0, 0)
	n(t, `[^abc]+`, "abc")
	// x(/a??/, 'aaa', 0, 0)
	// x(/ba??b/, 'bab', 0, 3)
	// x(/a*?/, 'aaa', 0, 0)
	// x(/ba*?/, 'baa', 0, 1)
	// x(/ba*?b/, 'baab', 0, 4)
	// x(/a+?/, 'aaa', 0, 1)
	// x(/ba+?/, 'baa', 0, 2)
	// x(/ba+?b/, 'baab', 0, 4)
	// x(/(?:a?)??/, 'a', 0, 0)
	// x(/(?:a??)?/, 'a', 0, 0)
	// x(/(?:a?)+?/, 'aaa', 0, 1)
	// x(/(?:a+)??/, 'aaa', 0, 0)
	// x(/(?:a+)??b/, 'aaab', 0, 4)
	// i(/(?:ab)?{2}/, '', 0, 0)   # GNU regex bug
	// x(/(?:ab)?{2}/, 'ababa', 0, 4)
	// x(/(?:ab)*{0}/, 'ababa', 0, 0)
	x(t, `(?:ab){3,}`, `abababab`, 0, 8)
	n(t, `(?:ab){3,}`, "abab")
	x(t, `(?:ab){2,4}`, `ababab`, 0, 6)
	x(t, `(?:ab){2,4}`, `ababababab`, 0, 8)
	// x(/(?:ab){2,4}?/, 'ababababab', 0, 4)
	x(t, `(?:ab){,}`, `ab{,}`, 0, 5)
	// x(/(?:abc)+?{2}/, 'abcabcabc', 0, 6)
	// x(/(?:X*)(?i:xa)/, 'XXXa', 0, 4)
	x(t, `(d+)([^abc]z)`, `dddz`, 0, 4)
	x(t, `([^abc]*)([^abc]z)`, `dddz`, 0, 4)
	x(t, `(\w+)(\wz)`, `dddz`, 0, 4)
	// x(/(a)/, 'a', 0, 1, 1)
	// x(/(ab)/, 'ab', 0, 2, 1)
	// x(/((ab))/, 'ab', 0, 2)
	// x(/((ab))/, 'ab', 0, 2, 1)
	// x(/((ab))/, 'ab', 0, 2, 2)
	// x(/((((((((((((((((((((ab))))))))))))))))))))/, 'ab', 0, 2, 20)
	// x(/(ab)(cd)/, 'abcd', 0, 2, 1)
	// x(/(ab)(cd)/, 'abcd', 2, 4, 2)
	// x(/()(a)bc(def)ghijk/, 'abcdefghijk', 3, 6, 3)
	// x(/(()(a)bc(def)ghijk)/, 'abcdefghijk', 3, 6, 4)
	// x(/(^a)/, 'a', 0, 1)
	// x(/(a)|(a)/, 'ba', 1, 2, 1)
	// x(/(^a)|(a)/, 'ba', 1, 2, 2)
	// x(/(a?)/, 'aaa', 0, 1, 1)
	// x(/(a*)/, 'aaa', 0, 3, 1)
	// x(/(a*)/, '', 0, 0, 1)
	// x(/(a+)/, 'aaaaaaa', 0, 7, 1)
	// x(/(a+|b*)/, 'bbbaa', 0, 3, 1)
	// x(/(a+|b?)/, 'bbbaa', 0, 1, 1)
	// x(/(abc)?/, 'abc', 0, 3, 1)
	// x(/(abc)*/, 'abc', 0, 3, 1)
	// x(/(abc)+/, 'abc', 0, 3, 1)
	// x(/(xyz|abc)+/, 'abc', 0, 3, 1) // TOOD : looks simple
	// x(/([xyz][abc]|abc)+/, 'abc', 0, 3, 1)
	// x(/((?i:abc))/, 'AbC', 0, 3, 1)
	// x(/(abc)(?i:\1)/, 'abcABC', 0, 6)
	// x(/((?m:a.c))/, "a\nc", 0, 3, 1)
	// x(/((?=az)a)/, 'azb', 0, 1, 1)
	// x(/abc|(.abd)/, 'zabd', 0, 4, 1)
	// x(/(?:abc)|(ABC)/, 'abc', 0, 3)
	// x(/(?i:(abc))|(zzz)/, 'ABC', 0, 3, 1)
	// x(/a*(.)/, 'aaaaz', 4, 5, 1)
	// x(/a*?(.)/, 'aaaaz', 0, 1, 1)
	// x(/a*?(c)/, 'aaaac', 4, 5, 1)
	// x(/[bcd]a*(.)/, 'caaaaz', 5, 6, 1)
	// x(/(\Abb)cc/, 'bbcc', 0, 2, 1)
	n(t, `(\Abb)cc`, "zbbcc")
	// x(/(^bb)cc/, 'bbcc', 0, 2, 1)
	n(t, `(^bb)cc`, "zbbcc")
	// x(/cc(bb$)/, 'ccbb', 2, 4, 1)
	n(t, `cc(bb$)`, "ccbbb")
	// #n(/\1/, 'a')     # compile error on Oniguruma
	n(t, `(\1)`, "")
	// n(t, `\1(a)`, "aa") // why?
	n(t, `(a(b)\1)\2+`, "ababb")
	// n(t, `(?:(?:\1|z)(a))+$`, "zaa")
	// x(/(?:(?:\1|z)(a))+$/, 'zaaa', 0, 4)
	x(t, `(a)(?=\1)`, "aa", 0, 1)
	// n(t, `(a)$|\1`, "az")
	// x(/(a)\1/, 'aa', 0, 2)
	n(t, `(a)\1`, "ab")
	// x(/(a?)\1/, 'aa', 0, 2)
	// x(/(a??)\1/, 'aa', 0, 0)
	// x(/(a*)\1/, 'aaaaa', 0, 4)
	// x(/(a*)\1/, 'aaaaa', 0, 2, 1)
	// x(/a(b*)\1/, 'abbbb', 0, 5)
	// x(/a(b*)\1/, 'ab', 0, 1)
	// x(/(a*)(b*)\1\2/, 'aaabbaaabb', 0, 10)
	// x(/(a*)(b*)\2/, 'aaabbbb', 0, 7)
	// x(/(((((((a*)b))))))c\7/, 'aaabcaaa', 0, 8)
	// x(/(((((((a*)b))))))c\7/, 'aaabcaaa', 0, 3, 7)
	// x(/(a)(b)(c)\2\1\3/, 'abcbac', 0, 6)
	x(t, `([a-d])\1`, `cc`, 0, 2)
	x(t, `(\w\d\s)\1`, `f5 f5 `, 0, 6)
	n(t, `(\w\d\s)\1`, "f5 f5")
	x(t, `(who|[a-c]{3})\1`, `whowho`, 0, 6)
	x(t, `...(who|[a-c]{3})\1`, `abcwhowho`, 0, 9)
	x(t, `(who|[a-c]{3})\1`, `cbccbc`, 0, 6)
	x(t, `(^a)\1`, `aa`, 0, 2)
	n(t, `(^a)\1`, "baa")
	n(t, `(a$)\1`, "aa")
	n(t, `(ab\Z)\1`, "ab")
	// x(/(a*\Z)\1/, 'a', 1, 1)
	// x(/.(a*\Z)\1/, 'ba', 1, 2)
	// x(/(.(abc)\2)/, 'zabcabc', 0, 7, 1)
	// x(/(.(..\d.)\2)/, 'z12341234', 0, 9, 1)
	// x(/((?i:az))\1/, 'AzAz', 0, 4)
	// n(/((?i:az))\1/, 'Azaz')
	// x(/(?<=a)b/, 'ab', 1, 2)
	n(t, `(?<=a)b`, "bb")
	// x(/(?<=a|b)b/, 'bb', 1, 2)
	// x(/(?<=a|bc)b/, 'bcb', 2, 3)
	// x(/(?<=a|bc)b/, 'ab', 1, 2)
	// x(/(?<=a|bc||defghij|klmnopq|r)z/, 'rz', 1, 2)
	// x(/(a)\g<1>/, 'aa', 0, 2)
	// x(/(?<!a)b/, 'cb', 1, 2)
	n(t, `(?<!a)b`, "ab")
	// x(/(?<!a|bc)b/, 'bbb', 0, 1)
	// n(t, `(?<!a|bc)z`, "bcz") // TODO : panic
	// x(/(?<name1>a)/, 'a', 0, 1)

	// x(t, `(?<name_2>ab)\g<name_2>`, `abab`, 0, 4)
	// x(/(?<name_3>.zv.)\k<name_3>/, 'azvbazvb', 0, 8)
	// x(/(?<=\g<ab>)|-\zEND (?<ab>XyZ)/, 'XyZ', 3, 3)
	// x(/(?<n>|a\g<n>)+/, '', 0, 0)
	// x(/(?<n>|\(\g<n>\))+$/, '()(())', 0, 6)
	// x(/\g<n>(?<n>.){0}/, 'X', 0, 1, 1)
	// x(/\g<n>(abc|df(?<n>.YZ){2,8}){0}/, 'XYZ', 0, 3)
	// x(/\A(?<n>(a\g<n>)|)\z/, 'aaaa', 0, 4)
	// x(/(?<n>|\g<m>\g<n>)\z|\zEND (?<m>a|(b)\g<m>)/, 'bbbbabba', 0, 8)
	// x(/(?<name1240>\w+\sx)a+\k<name1240>/, '  fg xaaaaaaaafg x', 2, 18)
	// x(/(z)()()(?<_9>a)\g<_9>/, 'zaa', 2, 3, 1)
	// x(/(.)(((?<_>a)))\k<_>/, 'zaa', 0, 3)
	// x(/((?<name1>\d)|(?<name2>\w))(\k<name1>|\k<name2>)/, 'ff', 0, 2)
	// x(/(?:(?<x>)|(?<x>efg))\k<x>/, '', 0, 0)
	// x(/(?:(?<x>abc)|(?<x>efg))\k<x>/, 'abcefgefg', 3, 9)
	n(t, `(?:(?<x>abc)|(?<x>efg))\k<x>`, "abcefg")
	// x(/(?:(?<n1>.)|(?<n1>..)|(?<n1>...)|(?<n1>....)|(?<n1>.....)|(?<n1>......)|(?<n1>.......)|(?<n1>........)|(?<n1>.........)|(?<n1>..........)|(?<n1>...........)|(?<n1>............)|(?<n1>.............)|(?<n1>..............))\k<n1>$/, 'a-pyumpyum', 2, 10)
	// x(/(?:(?<n1>.)|(?<n1>..)|(?<n1>...)|(?<n1>....)|(?<n1>.....)|(?<n1>......)|(?<n1>.......)|(?<n1>........)|(?<n1>.........)|(?<n1>..........)|(?<n1>...........)|(?<n1>............)|(?<n1>.............)|(?<n1>..............))\k<n1>$/, 'xxxxabcdefghijklmnabcdefghijklmn', 4, 18, 14)
	// x(/(?<name1>)(?<name2>)(?<name3>)(?<name4>)(?<name5>)(?<name6>)(?<name7>)(?<name8>)(?<name9>)(?<name10>)(?<name11>)(?<name12>)(?<name13>)(?<name14>)(?<name15>)(?<name16>aaa)(?<name17>)$/, 'aaa', 0, 3, 16)
	// x(/(?<foo>a|\(\g<foo>\))/, 'a', 0, 1)
	// x(/(?<foo>a|\(\g<foo>\))/, '((((((a))))))', 0, 13)
	// x(/(?<foo>a|\(\g<foo>\))/, '((((((((a))))))))', 0, 17, 1)
	// x(/\g<bar>|\zEND(?<bar>.*abc$)/, 'abcxxxabc', 0, 9)
	// x(/\g<1>|\zEND(.a.)/, 'bac', 0, 3)
	// x(/\g<_A>\g<_A>|\zEND(.a.)(?<_A>.b.)/, 'xbxyby', 3, 6, 1)
	// x(/\A(?:\g<pon>|\g<pan>|\zEND  (?<pan>a|c\g<pon>c)(?<pon>b|d\g<pan>d))$/, 'cdcbcdc', 0, 7)
	// x(/\A(?<n>|a\g<m>)\z|\zEND (?<m>\g<n>)/, 'aaaa', 0, 4)
	// x(/(?<n>(a|b\g<n>c){3,5})/, 'baaaaca', 1, 5)
	// x(/(?<n>(a|b\g<n>c){3,5})/, 'baaaacaaaaa', 0, 10)
	// x(/(?<pare>\(([^\(\)]++|\g<pare>)*+\))/, '((a))', 0, 5)

	// x(/()*\1/, '', 0, 0) // important =)

	// x(/(?:()|())*\1\2/, '', 0, 0)
	// x(/(?:\1a|())*/, 'a', 0, 0, 1)
	// x(/x((.)*)*x/, '0x1x2x3', 1, 6)
	// x(/x((.)*)*x(?i:\1)\Z/, '0x1x2x1X2', 1, 9)
	// x(/(?:()|()|()|()|()|())*\2\5/, '', 0, 0)
	// x(/(?:()|()|()|(x)|()|())*\2b\5/, 'b', 0, 1)

	// r(//, '', 0)
	// r(/a/, 'a', 0)
	// r(/a/, 'a', 0, 1)
	// r(/b/, 'abc', 1)
	// r(/b/, 'abc', 1, 2)
	// r(/./, 'a', 0)
	// r(/.*/, 'abcde fgh', 9)
	// r(/a*/, 'aaabbc', 6)
	// r(/a+/, 'aaabbc', 2)
	// r(/a?/, 'bac', 3)
	// r(/a??/, 'bac', 3)
	// r(/abcde/, 'abcdeavcd', 0)
	// r(/\w\d\s/, '  a2 aa $3 ', 2)
	// r(/[c-f]aa[x-z]/, '3caaycaaa', 1)
	// r(/(?i:fG)g/, 'fGgFggFgG', 3)
	// r(/a|b/, 'b', 0)
	// r(/ab|bc|cd/, 'bcc', 0)
	// r(/(ffy)\1/, 'ffyffyffy', 3)
	// r(/|z/, 'z', 1)
	// r(/^az/, 'azaz', 0)
	// r(/az$/, 'azaz', 2)
	// r(/(((.a)))\3/, 'zazaaa', 0)
	// r(/(ac*?z)\1/, 'aacczacczacz', 1)
	// r(/aaz{3,4}/, 'bbaabbaazzzaazz', 6)
	// r(/\000a/, "b\000a", 1)
	// r(/ff\xfe/, "fff\xfe", 1)
	// r(/...abcdefghijklmnopqrstuvwxyz/, 'zzzzzabcdefghijklmnopqrstuvwxyz', 2)

	// x(/\xED\xF2/, "\xed\xf2", 0, 2)
	// x(//, 'あ', 0, 0)
	// x(t, `あ`, "あ", 0, 2)
	// n(/い/, 'あ')
	// x(/うう/, 'うう', 0, 4)
	// x(/あいう/, 'あいう', 0, 6)
	// x(/こここここここここここここここここここここここここここここここここここ/, 'こここここここここここここここここここここここここここここここここここ', 0, 70)
	// x(/あ/, 'いあ', 2, 4)
	// x(/いう/, 'あいう', 2, 6)
	// x(/\xca\xb8/, "\xca\xb8", 0, 2)
	// x(/./, 'あ', 0, 2)
	// x(/../, 'かき', 0, 4)
	// x(/(?u)\w/, 'お', 0, 2)
	// n(/(?u)\W/, 'あ')
	// x(/(?u)[\W]/, 'う$', 2, 3)
	// x(/\S/, 'そ', 0, 2)
	// x(/\S/, '漢', 0, 2)
	// x(/\b/, '気 ', 0, 0)
	// x(/\b/, ' ほ', 1, 1)
	// x(/\B/, 'せそ ', 2, 2)
	// x(/\B/, 'う ', 3, 3)
	// x(/\B/, ' い', 0, 0)
	// x(/[たち]/, 'ち', 0, 2)
	// n(/[なに]/, 'ぬ')
	// x(/[う-お]/, 'え', 0, 2)
	// n(/[^け]/, 'け')
	// x(/(?u)[\w]/, 'ね', 0, 2)
	// n(/[\d]/, 'ふ')
	// x(/[\D]/, 'は', 0, 2)
	// n(/[\s]/, 'く')
	// x(/[\S]/, 'へ', 0, 2)
	// x(/(?u)[\w\d]/, 'よ', 0, 2)
	// x(/(?u)[\w\d]/, '   よ', 3, 5)
	// #x(/[\xa4\xcf-\xa4\xd3]/, "\xa4\xd0", 0, 2)  # diff spec with GNU regex.
	// #n(/[\xb6\xe7-\xb6\xef]/, "\xb6\xe5")        # diff spec with GNU regex.
	// n(/(?u)\w鬼車/, ' 鬼車')
	// x(/(?u)鬼\W車/, '鬼 車', 0, 5)
	// x(/あ.い.う/, 'ああいいう', 0, 10)
	// x(/(?u).\wう\W..ぞ/, 'えうう うぞぞ', 0, 13)
	// x(/(?u)\s\wこここ/, ' ここここ', 0, 9)
	// x(/ああ.け/, 'ああけけ', 0, 8)
	// n(/.い/, 'いえ')
	// x(/.お/, 'おお', 0, 4)
	// x(/^あ/, 'あ', 0, 2)
	// x(/^む$/, 'む', 0, 2)
	// x(/(?u)^\w$/, 'に', 0, 2)
	// x(/(?u)^\wかきくけこ$/, 'zかきくけこ', 0, 11)
	// x(/(?u)^\w...うえお$/, 'zあいううえお', 0, 13)
	// x(/(?u)\w\w\s\Wおおお\d/, 'aお  おおお4', 0, 12)
	// x(/\Aたちつ/, 'たちつ', 0, 6)
	// x(/むめも\Z/, 'むめも', 0, 6)
	// x(/かきく\z/, 'かきく', 0, 6)
	// x(/かきく\Z/, "かきく\n", 0, 6)
	// x(/\Gぽぴ/, 'ぽぴ', 0, 4)
	// n(/\Gえ/, 'うえお')
	// n(/とて\G/, 'とて')
	// n(/まみ\A/, 'まみ')
	// n(/ま\Aみ/, 'まみ')
	// x(/(?=せ)せ/, 'せ', 0, 2)
	// n(/(?=う)./, 'い')
	// x(/(?!う)か/, 'か', 0, 2)
	// n(/(?!と)あ/, 'と')
	// x(/(?i:あ)/, 'あ', 0, 2)
	// x(/(?i:ぶべ)/, 'ぶべ', 0, 4)
	// n(/(?i:い)/, 'う')
	// x(/(?m:よ.)/, "よ\n", 0, 3)
	// x(/(?m:.め)/, "ま\nめ", 2, 5)
	// x(/あ?/, '', 0, 0)
	// x(/変?/, '化', 0, 0)
	// x(/変?/, '変', 0, 2)
	// x(/量*/, '', 0, 0)
	// x(/量*/, '量', 0, 2)
	// x(/子*/, '子子子', 0, 6)
	// x(/馬*/, '鹿馬馬馬馬', 0, 0)
	// n(/山+/, '')
	// x(/河+/, '河', 0, 2)
	// x(/時+/, '時時時時', 0, 8)
	// x(/え+/, 'ええううう', 0, 4)
	// x(/う+/, 'おうううう', 2, 10)
	// x(/.?/, 'た', 0, 2)
	// x(/.*/, 'ぱぴぷぺ', 0, 8)
	// x(/.+/, 'ろ', 0, 2)
	// x(/.+/, "いうえか\n", 0, 8)
	// x(/あ|い/, 'あ', 0, 2)
	// x(/あ|い/, 'い', 0, 2)
	// x(/あい|いう/, 'あい', 0, 4)
	// x(/あい|いう/, 'いう', 0, 4)
	// x(/を(?:かき|きく)/, 'をかき', 0, 6)
	// x(/を(?:かき|きく)け/, 'をきくけ', 0, 8)
	// x(/あい|(?:あう|あを)/, 'あを', 0, 4)
	// x(/あ|い|う/, 'えう', 2, 4)
	// x(/あ|い|うえ|おかき|く|けこさ|しすせ|そ|たち|つてとなに|ぬね/, 'しすせ', 0, 6)
	// n(/あ|い|うえ|おかき|く|けこさ|しすせ|そ|たち|つてとなに|ぬね/, 'すせ')
	// x(/あ|^わ/, 'ぶあ', 2, 4)
	// x(/あ|^を/, 'をあ', 0, 2)
	// x(/鬼|\G車/, 'け車鬼', 4, 6)
	// x(/鬼|\G車/, '車鬼', 0, 2)
	// x(/鬼|\A車/, 'b車鬼', 3, 5)
	// x(/鬼|\A車/, '車', 0, 2)
	// x(/鬼|車\Z/, '車鬼', 2, 4)
	// x(/鬼|車\Z/, '車', 0, 2)
	// x(/鬼|車\Z/, "車\n", 0, 2)
	// x(/鬼|車\z/, '車鬼', 2, 4)
	// x(/鬼|車\z/, '車', 0, 2)
	// x(/(?u)\w|\s/, 'お', 0, 2)
	// x(/(?u)\w|%/, '%お', 0, 1)
	// x(/(?u)\w|[&$]/, 'う&', 0, 2)
	// x(/[い-け]/, 'う', 0, 2)
	// x(/[い-け]|[^か-こ]/, 'あ', 0, 2)
	// x(/[い-け]|[^か-こ]/, 'か', 0, 2)
	// x(/[^あ]/, "\n", 0, 1)
	// x(/(?:あ|[う-き])|いを/, 'うを', 0, 2)
	// x(/(?:あ|[う-き])|いを/, 'いを', 0, 4)
	// x(/あいう|(?=けけ)..ほ/, 'けけほ', 0, 6)
	// x(/あいう|(?!けけ)..ほ/, 'あいほ', 0, 6)
	// x(/(?=をあ)..あ|(?=をを)..あ/, 'ををあ', 0, 6)
	// x(/(?<=あ|いう)い/, 'いうい', 4, 6)
	// n(/(?>あ|あいえ)う/, 'あいえう')
	// x(/(?>あいえ|あ)う/, 'あいえう', 0, 8)
	// x(/あ?|い/, 'あ', 0, 2)
	// x(/あ?|い/, 'い', 0, 0)
	// x(/あ?|い/, '', 0, 0)
	// x(/あ*|い/, 'ああ', 0, 4)
	// x(/あ*|い*/, 'いあ', 0, 0)
	// x(/あ*|い*/, 'あい', 0, 2)
	// x(/[aあ]*|い*/, 'aあいいい', 0, 3)
	// x(/あ+|い*/, '', 0, 0)
	// x(/あ+|い*/, 'いいい', 0, 6)
	// x(/あ+|い*/, 'あいいい', 0, 2)
	// x(/あ+|い*/, 'aあいいい', 0, 0)
	// n(/あ+|い+/, '')
	// x(/(あ|い)?/, 'い', 0, 2)
	// x(/(あ|い)*/, 'いあ', 0, 4)
	// x(/(あ|い)+/, 'いあい', 0, 6)
	// x(/(あい|うあ)+/, 'うああいうえ', 0, 8)
	// x(/(あい|うえ)+/, 'うああいうえ', 4, 12)
	// x(/(あい|うあ)+/, 'ああいうあ', 2, 10)
	// x(/(あい|うあ)+/, 'あいをうあ', 0, 4)
	// x(/(あい|うあ)+/, '$$zzzzあいをうあ', 6, 10)
	// x(/(あ|いあい)+/, 'あいあいあ', 0, 10)
	// x(/(あ|いあい)+/, 'いあ', 2, 4)
	// x(/(あ|いあい)+/, 'いあああいあ', 2, 8)
	// x(/(?:あ|い)(?:あ|い)/, 'あい', 0, 4)
	// x(/(?:あ*|い*)(?:あ*|い*)/, 'あああいいい', 0, 6)
	// x(/(?:あ*|い*)(?:あ+|い+)/, 'あああいいい', 0, 12)
	// x(/(?:あ+|い+){2}/, 'あああいいい', 0, 12)
	// x(/(?:あ+|い+){1,2}/, 'あああいいい', 0, 12)
	// x(/(?:あ+|\Aい*)うう/, 'うう', 0, 4)
	// n(/(?:あ+|\Aい*)うう/, 'あいうう')
	// x(/(?:^あ+|い+)*う/, 'ああいいいあいう', 12, 16)
	// x(/(?:^あ+|い+)*う/, 'ああいいいいう', 0, 14)
	// x(/う{0,}/, 'うううう', 0, 8)
	// x(/あ|(?i)c/, 'C', 0, 1)
	// x(/(?i)c|あ/, 'C', 0, 1)
	// x(/(?i:あ)|a/, 'a', 0, 1)
	// n(/(?i:あ)|a/, 'A')
	// x(/[あいう]?/, 'あいう', 0, 2)
	// x(/[あいう]*/, 'あいう', 0, 6)
	// x(/[^あいう]*/, 'あいう', 0, 0)
	// n(/[^あいう]+/, 'あいう')
	// x(/あ??/, 'あああ', 0, 0)
	// x(/いあ??い/, 'いあい', 0, 6)
	// x(/あ*?/, 'あああ', 0, 0)
	// x(/いあ*?/, 'いああ', 0, 2)
	// x(/いあ*?い/, 'いああい', 0, 8)
	// x(/あ+?/, 'あああ', 0, 2)
	// x(/いあ+?/, 'いああ', 0, 4)
	// x(/いあ+?い/, 'いああい', 0, 8)
	// x(/(?:天?)??/, '天', 0, 0)
	// x(/(?:天??)?/, '天', 0, 0)
	// x(/(?:夢?)+?/, '夢夢夢', 0, 2)
	// x(/(?:風+)??/, '風風風', 0, 0)
	// x(/(?:雪+)??霜/, '雪雪雪霜', 0, 8)
	// i(/(?:あい)?{2}/, '', 0, 0)   # GNU regex bug
	// x(/(?:鬼車)?{2}/, '鬼車鬼車鬼', 0, 8)
	// x(/(?:鬼車)*{0}/, '鬼車鬼車鬼', 0, 0)
	// x(/(?:鬼車){3,}/, '鬼車鬼車鬼車鬼車', 0, 16)
	// n(/(?:鬼車){3,}/, '鬼車鬼車')
	// x(/(?:鬼車){2,4}/, '鬼車鬼車鬼車', 0, 12)
	// x(/(?:鬼車){2,4}/, '鬼車鬼車鬼車鬼車鬼車', 0, 16)
	// x(/(?:鬼車){2,4}?/, '鬼車鬼車鬼車鬼車鬼車', 0, 8)
	// x(/(?:鬼車){,}/, '鬼車{,}', 0, 7)
	// x(/(?:かきく)+?{2}/, 'かきくかきくかきく', 0, 12)
	// x(/(火)/, '火', 0, 2, 1)
	// x(/(火水)/, '火水', 0, 4, 1)
	// x(/((時間))/, '時間', 0, 4)
	// x(/((風水))/, '風水', 0, 4, 1)
	// x(/((昨日))/, '昨日', 0, 4, 2)
	// x(/((((((((((((((((((((量子))))))))))))))))))))/, '量子', 0, 4, 20)
	// x(/(あい)(うえ)/, 'あいうえ', 0, 4, 1)
	// x(/(あい)(うえ)/, 'あいうえ', 4, 8, 2)
	// x(/()(あ)いう(えおか)きくけこ/, 'あいうえおかきくけこ', 6, 12, 3)
	// x(/(()(あ)いう(えおか)きくけこ)/, 'あいうえおかきくけこ', 6, 12, 4)
	// x(/.*(フォ)ン・マ(ン()シュタ)イン/, 'フォン・マンシュタイン', 10, 18, 2)
	// x(/(^あ)/, 'あ', 0, 2)
	// x(/(あ)|(あ)/, 'いあ', 2, 4, 1)
	// x(/(^あ)|(あ)/, 'いあ', 2, 4, 2)
	// x(/(あ?)/, 'あああ', 0, 2, 1)
	// x(/(ま*)/, 'ままま', 0, 6, 1)
	// x(/(と*)/, '', 0, 0, 1)
	// x(/(る+)/, 'るるるるるるる', 0, 14, 1)
	// x(/(ふ+|へ*)/, 'ふふふへへ', 0, 6, 1)
	// x(/(あ+|い?)/, 'いいいああ', 0, 2, 1)
	// x(/(あいう)?/, 'あいう', 0, 6, 1)
	// x(/(あいう)*/, 'あいう', 0, 6, 1)
	// x(/(あいう)+/, 'あいう', 0, 6, 1)
	// x(/(さしす|あいう)+/, 'あいう', 0, 6, 1)
	// x(/([なにぬ][かきく]|かきく)+/, 'かきく', 0, 6, 1)
	// x(/((?i:あいう))/, 'あいう', 0, 6, 1)
	// x(/((?m:あ.う))/, "あ\nう", 0, 5, 1)
	// x(/((?=あん)あ)/, 'あんい', 0, 2, 1)
	// x(/あいう|(.あいえ)/, 'んあいえ', 0, 8, 1)
	// x(/あ*(.)/, 'ああああん', 8, 10, 1)
	// x(/あ*?(.)/, 'ああああん', 0, 2, 1)
	// x(/あ*?(ん)/, 'ああああん', 8, 10, 1)
	// x(/[いうえ]あ*(.)/, 'えああああん', 10, 12, 1)
	// x(/(\Aいい)うう/, 'いいうう', 0, 4, 1)
	// n(/(\Aいい)うう/, 'んいいうう')
	// x(/(^いい)うう/, 'いいうう', 0, 4, 1)
	// n(/(^いい)うう/, 'んいいうう')
	// x(/ろろ(るる$)/, 'ろろるる', 4, 8, 1)
	// n(/ろろ(るる$)/, 'ろろるるる')
	// x(/(無)\1/, '無無', 0, 4)
	// n(/(無)\1/, '無武')
	// x(/(空?)\1/, '空空', 0, 4)
	// x(/(空??)\1/, '空空', 0, 0)
	// x(/(空*)\1/, '空空空空空', 0, 8)
	// x(/(空*)\1/, '空空空空空', 0, 4, 1)
	// x(/あ(い*)\1/, 'あいいいい', 0, 10)
	// x(/あ(い*)\1/, 'あい', 0, 2)
	// x(/(あ*)(い*)\1\2/, 'あああいいあああいい', 0, 20)
	// x(/(あ*)(い*)\2/, 'あああいいいい', 0, 14)
	// x(/(あ*)(い*)\2/, 'あああいいいい', 6, 10, 2)
	// x(/(((((((ぽ*)ぺ))))))ぴ\7/, 'ぽぽぽぺぴぽぽぽ', 0, 16)
	// x(/(((((((ぽ*)ぺ))))))ぴ\7/, 'ぽぽぽぺぴぽぽぽ', 0, 6, 7)
	// x(/(は)(ひ)(ふ)\2\1\3/, 'はひふひはふ', 0, 12)
	// x(/([き-け])\1/, 'くく', 0, 4)
	// x(/(?u)(\w\d\s)\1/, 'あ5 あ5 ', 0, 8)
	// n(/(?u)(\w\d\s)\1/, 'あ5 あ5')
	// x(/(誰？|[あ-う]{3})\1/, '誰？誰？', 0, 8)
	// x(/...(誰？|[あ-う]{3})\1/, 'あaあ誰？誰？', 0, 13)
	// x(/(誰？|[あ-う]{3})\1/, 'ういうういう', 0, 12)
	// x(/(^こ)\1/, 'ここ', 0, 4)
	// n(/(^む)\1/, 'めむむ')
	// n(/(あ$)\1/, 'ああ')
	// n(/(あい\Z)\1/, 'あい')
	// x(/(あ*\Z)\1/, 'あ', 2, 2)
	// x(/.(あ*\Z)\1/, 'いあ', 2, 4)
	// x(/(.(やいゆ)\2)/, 'zやいゆやいゆ', 0, 13, 1)
	// x(/(.(..\d.)\2)/, 'あ12341234', 0, 10, 1)
	// x(/((?i:あvず))\1/, 'あvずあvず', 0, 10)
	// x(/(?<愚か>変|\(\g<愚か>\))/, '((((((変))))))', 0, 14)
	// x(/\A(?:\g<阿_1>|\g<云_2>|\z終了  (?<阿_1>観|自\g<云_2>自)(?<云_2>在|菩薩\g<阿_1>菩薩))$/, '菩薩自菩薩自在自菩薩自菩薩', 0, 26)
	// x(/[[ひふ]]/, 'ふ', 0, 2)
	// x(/[[いおう]か]/, 'か', 0, 2)
	// n(/[[^あ]]/, 'あ')
	// n(/[^[あ]]/, 'あ')
	// x(/[^[^あ]]/, 'あ', 0, 2)
	// x(/[[かきく]&&きく]/, 'く', 0, 2)
	// n(/[[かきく]&&きく]/, 'か')
	// n(/[[かきく]&&きく]/, 'け')
	// x(/[あ-ん&&い-を&&う-ゑ]/, 'ゑ', 0, 2)
	// n(/[^あ-ん&&い-を&&う-ゑ]/, 'ゑ')
	// x(/[[^あ&&あ]&&あ-ん]/, 'い', 0, 2)
	// n(/[[^あ&&あ]&&あ-ん]/, 'あ')
	// x(/[[^あ-ん&&いうえお]&&[^う-か]]/, 'き', 0, 2)
	// n(/[[^あ-ん&&いうえお]&&[^う-か]]/, 'い')
	// x(/[^[^あいう]&&[^うえお]]/, 'う', 0, 2)
	// x(/[^[^あいう]&&[^うえお]]/, 'え', 0, 2)
	// n(/[^[^あいう]&&[^うえお]]/, 'か')
	// x(/[あ-&&-あ]/, '-', 0, 1)
	// x(/[^[^a-zあいう]&&[^bcdefgうえお]q-w]/, 'え', 0, 2)
	// x(/[^[^a-zあいう]&&[^bcdefgうえお]g-w]/, 'f', 0, 1)
	// x(/[^[^a-zあいう]&&[^bcdefgうえお]g-w]/, 'g', 0, 1)
	// n(/[^[^a-zあいう]&&[^bcdefgうえお]g-w]/, '2')
	// x(/a<b>バージョンのダウンロード<\/b>/, 'a<b>バージョンのダウンロード</b>', 0, 32)
	// x(/.<b>バージョンのダウンロード<\/b>/, 'a<b>バージョンのダウンロード</b>', 0, 32)

	// r(/あ/, 'あ', 0)
	// r(/あ/, 'あ', 0, 2)
	// r(/い/, 'あいう', 2)
	// r(/い/, 'あいう', 2, 4)
	// r(/./, 'あ', 0)
	// r(/.*/, 'あいうえお かきく', 17)
	// r(/.*えお/, 'あいうえお かきく', 6)
	// r(/あ*/, 'あああいいう', 12)
	// r(/あ+/, 'あああいいう', 4)
	// r(/あ?/, 'いあう', 6)
	// r(/全??/, '負全変', 6)
	// r(/a辺c漢e/, 'a辺c漢eavcd', 0)
	// r(/(?u)\w\d\s/, '  あ2 うう $3 ', 2)
	// r(/[う-お]ああ[と-ん]/, '3うああなうあああ', 1)
	// r(/あ|い/, 'い', 0)
	// r(/あい|いう|うえ/, 'いうう', 0)
	// r(/(ととち)\1/, 'ととちととちととち', 6)
	// r(/|え/, 'え', 2)
	// r(/^あず/, 'あずあず', 0)
	// r(/あず$/, 'あずあず', 4)
	// r(/(((.あ)))\3/, 'zあzあああ', 0)
	// r(/(あう*?ん)\1/, 'ああううんあううんあうん', 2)
	// r(/ああん{3,4}/, 'ててああいいああんんんああんああん', 12)
	// r(/\000あ/, "い\000あ", 2)
	// r(/とと\xfe\xfe/, "ととと\xfe\xfe", 2)
	// r(/...あいうえおかきくけこさしすせそ/, 'zzzzzあいうえおかきくけこさしすせそ', 2)
}

func report(t testing.TB, isOk bool, result, reg, str string, n int, ranges ...int) {
	t.Helper()

	format := t.Logf
	if !isOk {
		format = t.Errorf
	}

	t.Logf("%s /%s/ : '%s'", result, reg, str)

	if n != 0 {
		format(":%d", n)
	}
	if len(ranges) > 0 {
		if len(ranges) == 2 {
			format(" (%d-%d : X-X)", ranges[0], ranges[1])
		} else if len(ranges) == 4 {
			format(" (%d-%d : %d-%d)", ranges[0], ranges[1], ranges[2], ranges[3])
		}
	}
}

func reportOK(t testing.TB, resultOpt, reg, str string, n int, ranges ...int) {
	t.Helper()

	result := "OK" + resultOpt
	result += strings.Repeat(" ", 7-len(result)) // Pad with spaces
	report(t, true, result, reg, str, n, ranges...)
}

func reportFail(t testing.TB, resultOpt, reg, str string, n int, ranges ...int) {
	t.Helper()

	result := "FAIL" + resultOpt
	result += strings.Repeat(" ", 7-len(result)) // Pad with spaces
	report(t, false, result, reg, str, n, ranges...)
}

func n(t *testing.T, expression, str string) {
	t.Helper()

	t.Run("must not match "+expression+" and "+str, func(t *testing.T) {
		tr := New(OnigmoParser)

		err := tr.Add(expression)
		if err != nil {
			t.Fatal(err)
		}

		t.Log("tree", tr)

		matches := tr.Match(str)
		t.Log("matches count", len(matches))

		if len(matches) == 0 {
			reportOK(t, "", expression, str, 0)
		} else {
			reportFail(t, "", expression, str, 0)
			t.Fatal()
		}
	})
}

func x(t *testing.T, expression, str string, start, size int) {
	t.Helper()

	n := 0 // what?

	t.Run("must match "+expression+" and "+str, func(t *testing.T) {
		tr := New(OnigmoParser)

		err := tr.Add(expression)
		if err != nil {
			t.Fatal(err)
		}

		t.Log("tree", tr)

		matches := tr.Match(str)
		t.Log("matches count", len(matches))

		if len(matches) != 0 {
			match := matches[0]

			t.Log("span", match.Span(), match.Span().From(), match.Span().Size())

			if match.Span().From() == start && match.Span().Size() == size {
				reportOK(t, "", expression, str, n)
			} else {
				reportFail(t, "", expression, str, n, start, size)
				t.Fatal()
			}
		} else {
			reportFail(t, "", expression, str, n)
			t.Fatal()
		}
	})
}
